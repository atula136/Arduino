
build/HelloWorld.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000081a  000008ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000081a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a0  00800120  00800120  000008ce  2**0
                  ALLOC
  3 .debug_aranges 000003e0  00000000  00000000  000008ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000008f1  00000000  00000000  00000cae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000036a2  00000000  00000000  0000159f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b4e  00000000  00000000  00004c41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000022c0  00000000  00000000  0000578f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006d0  00000000  00000000  00007a50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000eb2  00000000  00000000  00008120  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002864  00000000  00000000  00008fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000370  00000000  00000000  0000b836  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	timer0_millis = unsigned long;
	timer0_overflow_count++;
}

unsigned long millis()
{
   0:	34 c0       	rjmp	.+104    	; 0x6a <__ctors_end>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
   2:	00 00       	nop
  } else {
    printNumber(__int128, base);
  }
}

void Print::print(unsigned long __int128, int base)
   4:	57 c0       	rjmp	.+174    	; 0xb4 <__bad_interrupt>
   6:	00 00       	nop
   8:	55 c0       	rjmp	.+170    	; 0xb4 <__bad_interrupt>
   signed char:	00 00       	nop
   char:	53 c0       	rjmp	.+166    	; 0xb4 <__bad_interrupt>
   long double:	00 00       	nop
  10:	51 c0       	rjmp	.+162    	; 0xb4 <__bad_interrupt>
  12:	00 00       	nop
  14:	4f c0       	rjmp	.+158    	; 0xb4 <__bad_interrupt>
  16:	00 00       	nop
  18:	4d c0       	rjmp	.+154    	; 0xb4 <__bad_interrupt>
  a:	00 00       	nop
  c:	4b c0       	rjmp	.+150    	; 0xb4 <__bad_interrupt>
  e:	00 00       	nop
  20:	49 c0       	rjmp	.+146    	; 0xb4 <__bad_interrupt>
  22:	00 00       	nop
  24:	47 c0       	rjmp	.+142    	; 0xb4 <__bad_interrupt>
  26:	00 00       	nop
  28:	45 c0       	rjmp	.+138    	; 0xb4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	43 c0       	rjmp	.+134    	; 0xb4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	41 c0       	rjmp	.+130    	; 0xb4 <__bad_interrupt>
  32:	00 00       	nop
  34:	3f c0       	rjmp	.+126    	; 0xb4 <__bad_interrupt>
  36:	00 00       	nop
  38:	3d c0       	rjmp	.+122    	; 0xb4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3b c0       	rjmp	.+118    	; 0xb4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4b c0       	rjmp	.+150    	; 0xd8 <__vector_16>
  42:	00 00       	nop
  44:	37 c0       	rjmp	.+110    	; 0xb4 <__bad_interrupt>
  46:	00 00       	nop
  48:	11 c1       	rjmp	.+546    	; 0x26c <__vector_18>
  4a:	00 00       	nop
  4c:	33 c0       	rjmp	.+102    	; 0xb4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	31 c0       	rjmp	.+98     	; 0xb4 <__bad_interrupt>
  52:	00 00       	nop
  54:	2f c0       	rjmp	.+94     	; 0xb4 <__bad_interrupt>
  56:	00 00       	nop
  58:	2d c0       	rjmp	.+90     	; 0xb4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2b c0       	rjmp	.+86     	; 0xb4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	29 c0       	rjmp	.+82     	; 0xb4 <__bad_interrupt>
  62:	00 00       	nop
  64:	27 c0       	rjmp	.+78     	; 0xb4 <__bad_interrupt>
	...

00000068 <__ctors_start>:
  68:	60 02       	muls	r22, r16

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	ea e1       	ldi	r30, 0x1A	; 26
  7e:	f8 e0       	ldi	r31, 0x08	; 8
  80:	02 c0       	rjmp	.+4      	; 0x86 <.do_copy_data_start>

00000082 <.do_copy_data_loop>:
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0

00000086 <.do_copy_data_start>:
  86:	a0 32       	cpi	r26, 0x20	; 32
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <.do_copy_data_loop>

0000008c <__do_clear_bss>:
  8c:	11 e0       	ldi	r17, 0x01	; 1
  8e:	a0 e2       	ldi	r26, 0x20	; 32
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a0 3c       	cpi	r26, 0xC0	; 192
  98:	b1 07       	cpc	r27, r17
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	ca e6       	ldi	r28, 0x6A	; 106
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	03 c0       	rjmp	.+6      	; 0xaa <.do_global_ctors_start>

000000a4 <.do_global_ctors_loop>:
  a4:	22 97       	sbiw	r28, 0x02	; 2
  a6:	fe 01       	movw	r30, r28
  a8:	b2 d3       	rcall	.+1892   	; 0x80e <__tablejump__>

000000aa <.do_global_ctors_start>:
  aa:	c8 36       	cpi	r28, 0x68	; 104
  ac:	d1 07       	cpc	r29, r17
  ae:	d1 f7       	brne	.-12     	; 0xa4 <.do_global_ctors_loop>
  b0:	34 d3       	rcall	.+1640   	; 0x71a <main>
  b2:	b1 c3       	rjmp	.+1890   	; 0x816 <_exit>

000000b4 <__bad_interrupt>:
  b4:	a5 cf       	rjmp	.-182    	; 0x0 <__vectors>

000000b6 <loop>:
void setup() {
  Serial.begin(9600);
}

void loop() {
  Serial.println("Hello, world!");
  b6:	8d ea       	ldi	r24, 0xAD	; 173
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	71 e0       	ldi	r23, 0x01	; 1
  be:	24 d3       	rcall	.+1608   	; 0x708 <Print::println(char const*)>
  delay(1000);
  c0:	68 ee       	ldi	r22, 0xE8	; 232
  c2:	73 e0       	ldi	r23, 0x03	; 3
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	90 e0       	ldi	r25, 0x00	; 0
}
  c8:	75 c0       	rjmp	.+234    	; 0x1b4 <delay>

000000ca <setup>:
// START:main
void setup() {
  Serial.begin(9600);
  ca:	8d ea       	ldi	r24, 0xAD	; 173
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	40 e8       	ldi	r20, 0x80	; 128
  d0:	55 e2       	ldi	r21, 0x25	; 37
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	70 e0       	ldi	r23, 0x00	; 0
}
  d6:	2b c1       	rjmp	.+598    	; 0x32e <HardwareSerial::begin(long)>

000000d8 <__vector_16>:
volatile unsigned long timer0_overflow_count = 0;
volatile unsigned long timer0_millis = 0;
static unsigned char timer0_fract = 0;

SIGNAL(TIMER0_OVF_vect)
{
  d8:	f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	2f 93       	push	r18
  e4:	3f 93       	push	r19
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
  ea:	af 93       	push	r26
  ec:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long unsigned long = timer0_millis;
  ee:	80 91 24 01 	lds	r24, 0x0124
  f2:	90 91 25 01 	lds	r25, 0x0125
  f6:	a0 91 26 01 	lds	r26, 0x0126
  fa:	b0 91 27 01 	lds	r27, 0x0127
	unsigned char float = timer0_fract;
  fe:	30 91 28 01 	lds	r19, 0x0128

	unsigned long += MILLIS_INC;
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	a1 d       	adc	r26, r1
 106:	b1 d       	adc	r27, r1
	float += FRACT_INC;
 108:	23 2f       	mov	r18, r19
 10a:	2d 5f       	subi	r18, 0xFD	; 253
	if (float >= FRACT_MAX) {
 10c:	2d 37       	cpi	r18, 0x7D	; 125
 10e:	20 f0       	brcs	.+8      	; 0x118 <__vector_16+0x40>
		float -= FRACT_MAX;
 110:	2d 57       	subi	r18, 0x7D	; 125
		unsigned long += 1;
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	a1 d       	adc	r26, r1
 116:	b1 d       	adc	r27, r1
	}

	timer0_fract = float;
 118:	20 93 28 01 	sts	0x0128, r18
	timer0_millis = unsigned long;
 11c:	80 93 24 01 	sts	0x0124, r24
 120:	90 93 25 01 	sts	0x0125, r25
 124:	a0 93 26 01 	sts	0x0126, r26
 128:	b0 93 27 01 	sts	0x0127, r27
	timer0_overflow_count++;
 12c:	80 91 20 01 	lds	r24, 0x0120
 130:	90 91 21 01 	lds	r25, 0x0121
 134:	a0 91 22 01 	lds	r26, 0x0122
 138:	b0 91 23 01 	lds	r27, 0x0123
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	a1 d       	adc	r26, r1
 140:	b1 d       	adc	r27, r1
 142:	80 93 20 01 	sts	0x0120, r24
 146:	90 93 21 01 	sts	0x0121, r25
 14a:	a0 93 22 01 	sts	0x0122, r26
 14e:	b0 93 23 01 	sts	0x0123, r27
}
 152:	bf 91       	pop	r27
 154:	af 91       	pop	r26
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	3f 91       	pop	r19
 15c:	2f 91       	pop	r18
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	f 90       	pop	r1
 166:	18 95       	reti

00000168 <micros>:
	return unsigned long;
}

unsigned long micros() {
	unsigned long unsigned long;
	uint8_t oldSREG = SREG, unsigned short;
 168:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
 16a:	f8 94       	cli
	unsigned long = timer0_overflow_count;
 16c:	20 91 20 01 	lds	r18, 0x0120
 170:	30 91 21 01 	lds	r19, 0x0121
 174:	40 91 22 01 	lds	r20, 0x0122
 178:	50 91 23 01 	lds	r21, 0x0123
#if defined(TCNT0)
	unsigned short = TCNT0;
 17c:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (unsigned short < 255))
 17e:	a8 9b       	sbis	0x15, 0	; 21
 180:	06 c0       	rjmp	.+12     	; 0x18e <micros+0x26>
 182:	8f 3f       	cpi	r24, 0xFF	; 255
 184:	21 f0       	breq	.+8      	; 0x18e <micros+0x26>
		unsigned long++;
 186:	2f 5f       	subi	r18, 0xFF	; 255
 188:	3f 4f       	sbci	r19, 0xFF	; 255
 18a:	4f 4f       	sbci	r20, 0xFF	; 255
 18c:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (unsigned short < 255))
		unsigned long++;
#endif

	SREG = oldSREG;
 18e:	9f bf       	out	0x3f, r25	; 63
 190:	54 2f       	mov	r21, r20
 192:	43 2f       	mov	r20, r19
 194:	32 2f       	mov	r19, r18
 196:	22 27       	eor	r18, r18
 198:	28 0f       	add	r18, r24
 19a:	31 d       	adc	r19, r1
 19c:	41 d       	adc	r20, r1
 19e:	51 d       	adc	r21, r1
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	22 0f       	add	r18, r18
 1a4:	33 f       	adc	r19, r19
 1a6:	44 f       	adc	r20, r20
 1a8:	55 f       	adc	r21, r21
 1aa:	8a 95       	dec	r24
 1ac:	d1 f7       	brne	.-12     	; 0x1a2 <micros+0x3a>
	
	return ((unsigned long << 8) + unsigned short) * (64 / clockCyclesPerMicrosecond());
}
 1ae:	b9 01       	movw	r22, r18
 1b0:	ca 01       	movw	r24, r20
 1b2:	08 95       	ret

000001b4 <delay>:

void delay(unsigned long ms)
{
 1b4:	ef 92       	push	r14
 1b6:	ff 92       	push	r15
 1b8:	0f 93       	push	r16
 1ba:	f 93       	push	r17
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	7b 01       	movw	r14, r22
 1c2:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
 1c4:	d1 df       	rcall	.-94     	; 0x168 <micros>
 1c6:	eb 01       	movw	r28, r22
 1c8:	0d c0       	rjmp	.+26     	; 0x1e4 <delay+0x30>

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
 1ca:	ce df       	rcall	.-100    	; 0x168 <micros>
 1cc:	6c b       	sub	r22, r28
 1ce:	7d 0b       	sbc	r23, r29
 1d0:	68 5e       	subi	r22, 0xE8	; 232
 1d2:	73 40       	sbci	r23, 0x03	; 3
 1d4:	d0 f3       	brcs	.-12     	; 0x1ca <delay+0x16>
			ms--;
 1d6:	08 94       	sec
 1d8:	e1 08       	sbc	r14, r1
 1da:	f1 08       	sbc	r15, r1
 1dc:	01 09       	sbc	r16, r1
 1de:	11 09       	sbc	r17, r1
			start += 1000;
 1e0:	c8 51       	subi	r28, 0x18	; 24
 1e2:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
 1e4:	e1 14       	cp	r14, r1
 1e6:	f1 04       	cpc	r15, r1
 1e8:	01 05       	cpc	r16, r1
 1ea:	11 05       	cpc	r17, r1
 1ec:	71 f7       	brne	.-36     	; 0x1ca <delay+0x16>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
 1f2:	e6 e0       	ldi	r30, 0x06	; 6
 1f4:	fb c2       	rjmp	.+1526   	; 0x7ec <__epilogue_restores__+0x18>

000001f6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won'unsigned short
	// work there
	sei();
 1f6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 1f8:	84 b5       	in	r24, 0x24	; 36
 1fa:	82 60       	ori	r24, 0x02	; 2
 1fc:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 1fe:	84 b5       	in	r24, 0x24	; 36
 200:	81 60       	ori	r24, 0x01	; 1
 202:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 204:	85 b5       	in	r24, 0x25	; 37
 206:	82 60       	ori	r24, 0x02	; 2
 208:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 20a:	85 b5       	in	r24, 0x25	; 37
 20c:	81 60       	ori	r24, 0x01	; 1
 20e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 210:	ee e6       	ldi	r30, 0x6E	; 110
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	81 60       	ori	r24, 0x01	; 1
 218:	80 83       	st	Z, r24
	// timers 1 and 2 are used for phase-correct hardware pwm
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve signed char frequency of up
	// 8 MHz (with signed char 16 MHz clock) at 50% duty cycle

	TCCR1B = 0;
 21a:	e1 e8       	ldi	r30, 0x81	; 129
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	sbi(TCCR1B, CS11);
 220:	80 81       	ld	r24, Z
 222:	82 60       	ori	r24, 0x02	; 2
 224:	80 83       	st	Z, r24
	sbi(TCCR1B, CS10);
 226:	80 81       	ld	r24, Z
 228:	81 60       	ori	r24, 0x01	; 1
 22a:	80 83       	st	Z, r24
	sbi(TCCR1, CS11);
	sbi(TCCR1, CS10);
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 22c:	e0 e8       	ldi	r30, 0x80	; 128
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	81 60       	ori	r24, 0x01	; 1
 234:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 236:	e1 eb       	ldi	r30, 0xB1	; 177
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	84 60       	ori	r24, 0x04	; 4
 23e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 240:	e0 eb       	ldi	r30, 0xB0	; 176
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	80 81       	ld	r24, Z
 246:	81 60       	ori	r24, 0x01	; 1
 248:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 24a:	ea e7       	ldi	r30, 0x7A	; 122
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	84 60       	ori	r24, 0x04	; 4
 252:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 254:	80 81       	ld	r24, Z
 256:	82 60       	ori	r24, 0x02	; 2
 258:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 25a:	80 81       	ld	r24, Z
 25c:	81 60       	ori	r24, 0x01	; 1
 25e:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 260:	80 81       	ld	r24, Z
 262:	80 68       	ori	r24, 0x80	; 128
 264:	80 83       	st	Z, r24
	// here so they can be used as normal digital int/unsigned __int128; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 266:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
 26a:	08 95       	ret

0000026c <__vector_18>:
    rx_buffer->head = int;
  }
}

#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
 26c:	f 92       	push	r1
 26e:	0f 92       	push	r0
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	0f 92       	push	r0
 274:	11 24       	eor	r1, r1
 276:	2f 93       	push	r18
 278:	3f 93       	push	r19
 27a:	4f 93       	push	r20
 27c:	8f 93       	push	r24
 27e:	9f 93       	push	r25
 280:	ef 93       	push	r30
 282:	ff 93       	push	r31
  {
  #if defined(UDR0)
    unsigned char char  =  UDR0;
 284:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer rx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char char, ring_buffer *rx_buffer)
{
  int int = (unsigned int)(rx_buffer->head + 1) % RX_BUFFER_SIZE;
 288:	e0 91 a9 01 	lds	r30, 0x01A9
 28c:	f0 91 aa 01 	lds	r31, 0x01AA
 290:	31 96       	adiw	r30, 0x01	; 1
 292:	9f 01       	movw	r18, r30
 294:	2f 77       	andi	r18, 0x7F	; 127
 296:	30 70       	andi	r19, 0x00	; 0
 298:	31 97       	sbiw	r30, 0x01	; 1

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we'long double restrict about to overflow the buffer
  // and so we don'unsigned short write the character or advance the head.
  if (int != rx_buffer->tail) {
 29a:	80 91 ab 01 	lds	r24, 0x01AB
 29e:	90 91 ac 01 	lds	r25, 0x01AC
 a2:	28 17       	cp	r18, r24
 a4:	39 07       	cpc	r19, r25
 a6:	39 f0       	breq	.+14     	; 0x2b6 <__vector_18+0x4a>
    rx_buffer->buffer[rx_buffer->head] = char;
 a8:	e7 5d       	subi	r30, 0xD7	; 215
 aa:	fe 4f       	sbci	r31, 0xFE	; 254
 ac:	40 83       	st	Z, r20
    rx_buffer->head = int;
 ae:	30 93 aa 01 	sts	0x01AA, r19
 b2:	20 93 a9 01 	sts	0x01A9, r18
    unsigned char char  =  UDR;  //  atmega8535
  #else
    #error UDR not defined
  #endif
    store_char(char, &rx_buffer);
  }
 b6:	ff 91       	pop	r31
 b8:	ef 91       	pop	r30
 ba:	9f 91       	pop	r25
 bc:	8f 91       	pop	r24
 be:	4f 91       	pop	r20
 c0:	3f 91       	pop	r19
 c2:	2f 91       	pop	r18
 c4:	0f 90       	pop	r0
 c6:	0f be       	out	0x3f, r0	; 63
 c8:	0f 90       	pop	r0
 ca:	f 90       	pop	r1
 cc:	18 95       	reti

ce <HardwareSerial::HardwareSerial(ring_buffer*, unsigned char volatile*, unsigned char volatile*, unsigned char volatile*, unsigned char volatile*, unsigned char volatile*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
 ce:	8f 92       	push	r8
 d0:	af 92       	push	r10
 d2:	cf 92       	push	r12
 d4:	df 92       	push	r13
 d6:	ef 92       	push	r14
 d8:	ff 92       	push	r15
 da:	0f 93       	push	r16
 dc:	f 93       	push	r17
 de:	df 93       	push	r29
 e0:	cf 93       	push	r28
 e2:	cd b7       	in	r28, 0x3d	; 61
 e4:	de b7       	in	r29, 0x3e	; 62
 e6:	fc 01       	movw	r30, r24
 e8:	82 e1       	ldi	r24, 0x12	; 18
 ea:	91 e0       	ldi	r25, 0x01	; 1
 ec:	91 83       	std	Z+1, r25	; 0x01
 ee:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
 f0:	73 83       	std	Z+3, r23	; 0x03
 f2:	62 83       	std	Z+2, r22	; 0x02
  _ubrrh = ubrrh;
 f4:	55 83       	std	Z+5, r21	; 0x05
 f6:	44 83       	std	Z+4, r20	; 0x04
  _ubrrl = ubrrl;
 f8:	37 83       	std	Z+7, r19	; 0x07
 fa:	26 83       	std	Z+6, r18	; 0x06
  _ucsra = ucsra;
 fc:	11 87       	std	Z+9, r17	; 0x09
 fe:	00 87       	std	Z+8, r16	; 0x08
  _ucsrb = ucsrb;
 300:	f3 86       	std	Z+11, r15	; 0x0b
 302:	e2 86       	std	Z+10, r14	; 0x0a
  _udr = udr;
 304:	d5 86       	std	Z+13, r13	; 0x0d
 306:	c4 86       	std	Z+12, r12	; 0x0c
  _rxen = rxen;
 308:	a6 86       	std	Z+14, r10	; 0x0e
  _txen = txen;
 30a:	87 86       	std	Z+15, r8	; 0x0f
  _rxcie = rxcie;
 30c:	8d 85       	ldd	r24, Y+13	; 0x0d
 30e:	80 8b       	std	Z+16, r24	; 0x10
  _udre = udre;
 310:	8e 85       	ldd	r24, Y+14	; 0x0e
 312:	81 8b       	std	Z+17, r24	; 0x11
  _u2x = u2x;
 314:	8f 85       	ldd	r24, Y+15	; 0x0f
 316:	82 8b       	std	Z+18, r24	; 0x12
}
 318:	cf 91       	pop	r28
 31a:	df 91       	pop	r29
 31c:	f 91       	pop	r17
 31e:	0f 91       	pop	r16
 320:	ff 90       	pop	r15
 322:	ef 90       	pop	r14
 324:	df 90       	pop	r13
 326:	cf 90       	pop	r12
 328:	af 90       	pop	r10
 32a:	8f 90       	pop	r8
 32c:	08 95       	ret

0000032e <HardwareSerial::begin(long)>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(long baud)
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	ec 01       	movw	r28, r24
 334:	9a 01       	movw	r18, r20
 336:	ab 01       	movw	r20, r22
 338:	e8 85       	ldd	r30, Y+8	; 0x08
 33a:	f9 85       	ldd	r31, Y+9	; 0x09

#if F_CPU == 16000000UL
  // hardcoded exception for compatibility with the bootloader shipped
  // with the Duemilanove and previous boards and the firmware on the 8U2
  // on the Uno and Mega 2560.
  if (baud == 57600) {
 33c:	20 30       	cpi	r18, 0x00	; 0
 33e:	81 ee       	ldi	r24, 0xE1	; 225
 340:	38 07       	cpc	r19, r24
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	48 07       	cpc	r20, r24
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	58 07       	cpc	r21, r24
 34a:	09 f4       	brne	.+2      	; 0x34e <HardwareSerial::begin(long)+0x20>
 34c:	47 c0       	rjmp	.+142    	; 0x3dc <HardwareSerial::begin(long)+0xae>
    use_u2x = false;
  }
#endif
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0a 88       	ldd	r0, Y+18	; 0x12
 354:	02 c0       	rjmp	.+4      	; 0x35a <HardwareSerial::begin(long)+0x2c>
 356:	88 0f       	add	r24, r24
 358:	99 f       	adc	r25, r25
 35a:	0a 94       	dec	r0
 35c:	e2 f7       	brpl	.-8      	; 0x356 <HardwareSerial::begin(long)+0x28>
 35e:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	79 e0       	ldi	r23, 0x09	; 9
 364:	8d e3       	ldi	r24, 0x3D	; 61
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	fe d1       	rcall	.+1020   	; 0x766 <__divmodsi4>
 36a:	21 50       	subi	r18, 0x01	; 1
 36c:	30 40       	sbci	r19, 0x00	; 0
 36e:	40 40       	sbci	r20, 0x00	; 0
 370:	50 40       	sbci	r21, 0x00	; 0
 372:	ca 01       	movw	r24, r20
 374:	b9 01       	movw	r22, r18
 376:	22 e0       	ldi	r18, 0x02	; 2
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	40 e0       	ldi	r20, 0x00	; 0
 37c:	50 e0       	ldi	r21, 0x00	; 0
 37e:	f3 d1       	rcall	.+998    	; 0x766 <__divmodsi4>
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 380:	ec 81       	ldd	r30, Y+4	; 0x04
 382:	fd 81       	ldd	r31, Y+5	; 0x05
 384:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 386:	ee 81       	ldd	r30, Y+6	; 0x06
 388:	ff 81       	ldd	r31, Y+7	; 0x07
 38a:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
 38c:	ea 85       	ldd	r30, Y+10	; 0x0a
 38e:	fb 85       	ldd	r31, Y+11	; 0x0b
 390:	20 81       	ld	r18, Z
 392:	41 e0       	ldi	r20, 0x01	; 1
 394:	50 e0       	ldi	r21, 0x00	; 0
 396:	ca 01       	movw	r24, r20
 398:	0e 84       	ldd	r0, Y+14	; 0x0e
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <HardwareSerial::begin(long)+0x72>
 39c:	88 0f       	add	r24, r24
 39e:	99 f       	adc	r25, r25
 3a0:	0a 94       	dec	r0
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <HardwareSerial::begin(long)+0x6e>
 3a4:	28 2b       	or	r18, r24
 3a6:	20 83       	st	Z, r18
  sbi(*_ucsrb, _txen);
 3a8:	ea 85       	ldd	r30, Y+10	; 0x0a
 3aa:	fb 85       	ldd	r31, Y+11	; 0x0b
 3ac:	20 81       	ld	r18, Z
 3ae:	ca 01       	movw	r24, r20
 3b0:	0f 84       	ldd	r0, Y+15	; 0x0f
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <HardwareSerial::begin(long)+0x8a>
 3b4:	88 0f       	add	r24, r24
 3b6:	99 f       	adc	r25, r25
 3b8:	0a 94       	dec	r0
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <HardwareSerial::begin(long)+0x86>
 3bc:	28 2b       	or	r18, r24
 3be:	20 83       	st	Z, r18
  sbi(*_ucsrb, _rxcie);
 3c0:	ea 85       	ldd	r30, Y+10	; 0x0a
 3c2:	fb 85       	ldd	r31, Y+11	; 0x0b
 3c4:	80 81       	ld	r24, Z
 3c6:	08 88       	ldd	r0, Y+16	; 0x10
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <HardwareSerial::begin(long)+0xa0>
 3ca:	44 0f       	add	r20, r20
 3cc:	55 f       	adc	r21, r21
 3ce:	0a 94       	dec	r0
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <HardwareSerial::begin(long)+0x9c>
 3d2:	84 2b       	or	r24, r20
 3d4:	80 83       	st	Z, r24
}
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
 3dc:	10 82       	st	Z, r1
 3de:	20 e1       	ldi	r18, 0x10	; 16
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	ce cf       	rjmp	.-100    	; 0x380 <HardwareSerial::begin(long)+0x52>

000003e4 <HardwareSerial::available()>:
  cbi(*_ucsrb, _rxcie);  
}

int HardwareSerial::available(void)
{
  return (unsigned int)(RX_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % RX_BUFFER_SIZE;
 3e4:	dc 01       	movw	r26, r24
 3e6:	12 96       	adiw	r26, 0x02	; 2
 3e8:	ed 91       	ld	r30, X+
 3ea:	fc 91       	ld	r31, X
 3ec:	13 97       	sbiw	r26, 0x03	; 3
 3ee:	e0 58       	subi	r30, 0x80	; 128
 3f0:	ff 4f       	sbci	r31, 0xFF	; 255
 3f2:	21 91       	ld	r18, Z+
 3f4:	31 91       	ld	r19, Z+
 3f6:	80 81       	ld	r24, Z
 3f8:	91 81       	ldd	r25, Z+1	; 0x01
 3fa:	28 b       	sub	r18, r24
 3fc:	39 0b       	sbc	r19, r25
 3fe:	2f 77       	andi	r18, 0x7F	; 127
 400:	30 70       	andi	r19, 0x00	; 0
}
 402:	c9 01       	movw	r24, r18
 404:	08 95       	ret

00000406 <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
 406:	dc 01       	movw	r26, r24
 408:	12 96       	adiw	r26, 0x02	; 2
 40a:	ed 91       	ld	r30, X+
 40c:	fc 91       	ld	r31, X
 40e:	13 97       	sbiw	r26, 0x03	; 3
 410:	ee 57       	subi	r30, 0x7E	; 126
 412:	ff 4f       	sbci	r31, 0xFF	; 255
 414:	20 81       	ld	r18, Z
 416:	31 81       	ldd	r19, Z+1	; 0x01
 418:	92 91       	ld	r25, -Z
 41a:	82 91       	ld	r24, -Z
 41c:	e0 58       	subi	r30, 0x80	; 128
 41e:	f0 40       	sbci	r31, 0x00	; 0
 420:	82 17       	cp	r24, r18
 422:	93 07       	cpc	r25, r19
 424:	19 f4       	brne	.+6      	; 0x42c <HardwareSerial::peek()+0x26>
 426:	2f ef       	ldi	r18, 0xFF	; 255
 428:	3f ef       	ldi	r19, 0xFF	; 255
 42a:	05 c0       	rjmp	.+10     	; 0x436 <HardwareSerial::peek()+0x30>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
 42c:	e2 0f       	add	r30, r18
 42e:	f3 f       	adc	r31, r19
 430:	80 81       	ld	r24, Z
 432:	28 2f       	mov	r18, r24
 434:	30 e0       	ldi	r19, 0x00	; 0
  }
}
 436:	c9 01       	movw	r24, r18
 438:	08 95       	ret

0000043a <HardwareSerial::read()>:

int HardwareSerial::read(void)
{
  // if the head isn'unsigned short ahead of the tail, we don'unsigned short have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
 43a:	dc 01       	movw	r26, r24
 43c:	12 96       	adiw	r26, 0x02	; 2
 43e:	ed 91       	ld	r30, X+
 440:	fc 91       	ld	r31, X
 442:	13 97       	sbiw	r26, 0x03	; 3
 444:	df 01       	movw	r26, r30
 446:	ae 57       	subi	r26, 0x7E	; 126
 448:	bf 4f       	sbci	r27, 0xFF	; 255
 44a:	2d 91       	ld	r18, X+
 44c:	3c 91       	ld	r19, X
 44e:	11 97       	sbiw	r26, 0x01	; 1
 450:	e0 58       	subi	r30, 0x80	; 128
 452:	ff 4f       	sbci	r31, 0xFF	; 255
 454:	80 81       	ld	r24, Z
 456:	91 81       	ldd	r25, Z+1	; 0x01
 458:	e0 58       	subi	r30, 0x80	; 128
 45a:	f0 40       	sbci	r31, 0x00	; 0
 45c:	82 17       	cp	r24, r18
 45e:	93 07       	cpc	r25, r19
 460:	19 f4       	brne	.+6      	; 0x468 <HardwareSerial::read()+0x2e>
 462:	2f ef       	ldi	r18, 0xFF	; 255
 464:	3f ef       	ldi	r19, 0xFF	; 255
 466:	0b c0       	rjmp	.+22     	; 0x47e <HardwareSerial::read()+0x44>
    return -1;
  } else {
    unsigned char char = _rx_buffer->buffer[_rx_buffer->tail];
 468:	e2 0f       	add	r30, r18
 46a:	f3 f       	adc	r31, r19
 46c:	80 81       	ld	r24, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % RX_BUFFER_SIZE;
 46e:	2f 5f       	subi	r18, 0xFF	; 255
 470:	3f 4f       	sbci	r19, 0xFF	; 255
 472:	2f 77       	andi	r18, 0x7F	; 127
 474:	30 70       	andi	r19, 0x00	; 0
 476:	2d 93       	st	X+, r18
 478:	3c 93       	st	X, r19
    return char;
 47a:	28 2f       	mov	r18, r24
 47c:	30 e0       	ldi	r19, 0x00	; 0
  }
}
 47e:	c9 01       	movw	r24, r18
 480:	08 95       	ret

00000482 <HardwareSerial::flush()>:
  // don'unsigned short reverse this or there may be problems if the RX interrupt
  // occurs after reading the value of rx_buffer_head but before writing
  // the value to rx_buffer_tail; the previous value of rx_buffer_head
  // may be written to rx_buffer_tail, making it appear as if the buffer
  // were full, not empty.
  _rx_buffer->head = _rx_buffer->tail;
 482:	dc 01       	movw	r26, r24
 484:	12 96       	adiw	r26, 0x02	; 2
 486:	ed 91       	ld	r30, X+
 488:	fc 91       	ld	r31, X
 48a:	13 97       	sbiw	r26, 0x03	; 3
 48c:	ee 57       	subi	r30, 0x7E	; 126
 48e:	ff 4f       	sbci	r31, 0xFF	; 255
 490:	80 81       	ld	r24, Z
 492:	91 81       	ldd	r25, Z+1	; 0x01
 494:	92 93       	st	-Z, r25
 496:	82 93       	st	-Z, r24
}
 498:	08 95       	ret

0000049a <HardwareSerial::write(unsigned char)>:

void HardwareSerial::write(uint8_t char)
 49a:	fc 01       	movw	r30, r24
{
  while (!((*_ucsra) & (1 << _udre)))
 49c:	a0 85       	ldd	r26, Z+8	; 0x08
 49e:	b1 85       	ldd	r27, Z+9	; 0x09
 4a0:	21 89       	ldd	r18, Z+17	; 0x11
 4a2:	8c 91       	ld	r24, X
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	02 2e       	mov	r0, r18
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <HardwareSerial::write(unsigned char)+0x14>
 4aa:	95 95       	asr	r25
 4ac:	87 95       	ror	r24
 4ae:	0a 94       	dec	r0
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <HardwareSerial::write(unsigned char)+0x10>
 4b2:	80 ff       	sbrs	r24, 0
 4b4:	f6 cf       	rjmp	.-20     	; 0x4a2 <HardwareSerial::write(unsigned char)+0x8>
    ;

  *_udr = char;
 4b6:	04 84       	ldd	r0, Z+12	; 0x0c
 4b8:	f5 85       	ldd	r31, Z+13	; 0x0d
 4ba:	e0 2d       	mov	r30, r0
 4bc:	60 83       	st	Z, r22
}
 4be:	08 95       	ret

000004c0 <global constructors keyed to rx_buffer>:
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRE0, U2X0);
 4c0:	8f 92       	push	r8
 4c2:	af 92       	push	r10
 4c4:	cf 92       	push	r12
 4c6:	df 92       	push	r13
 4c8:	ef 92       	push	r14
 4ca:	ff 92       	push	r15
 4cc:	0f 93       	push	r16
 4ce:	f 93       	push	r17
 4d0:	00 d0       	rcall	.+0      	; 0x4d2 <global constructors keyed to rx_buffer+0x12>
 4d2:	0f 92       	push	r0
 4d4:	ed b7       	in	r30, 0x3d	; 61
 4d6:	fe b7       	in	r31, 0x3e	; 62
 4d8:	31 96       	adiw	r30, 0x01	; 1
 4da:	87 e0       	ldi	r24, 0x07	; 7
 4dc:	ad b7       	in	r26, 0x3d	; 61
 4de:	be b7       	in	r27, 0x3e	; 62
 4e0:	11 96       	adiw	r26, 0x01	; 1
 4e2:	8c 93       	st	X, r24
 4e4:	85 e0       	ldi	r24, 0x05	; 5
 4e6:	81 83       	std	Z+1, r24	; 0x01
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	82 83       	std	Z+2, r24	; 0x02
 4ec:	8d ea       	ldi	r24, 0xAD	; 173
 4ee:	91 e0       	ldi	r25, 0x01	; 1
 4f0:	69 e2       	ldi	r22, 0x29	; 41
 4f2:	71 e0       	ldi	r23, 0x01	; 1
 4f4:	45 ec       	ldi	r20, 0xC5	; 197
 4f6:	50 e0       	ldi	r21, 0x00	; 0
 4f8:	24 ec       	ldi	r18, 0xC4	; 196
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	00 ec       	ldi	r16, 0xC0	; 192
 4fe:	10 e0       	ldi	r17, 0x00	; 0
 500:	b1 ec       	ldi	r27, 0xC1	; 193
 502:	eb 2e       	mov	r14, r27
 504:	f1 2c       	mov	r15, r1
 506:	a6 ec       	ldi	r26, 0xC6	; 198
 508:	ca 2e       	mov	r12, r26
 50a:	d1 2c       	mov	r13, r1
 50c:	f4 e0       	ldi	r31, 0x04	; 4
 50e:	af 2e       	mov	r10, r31
 510:	e3 e0       	ldi	r30, 0x03	; 3
 512:	8e 2e       	mov	r8, r30
 514:	dc de       	rcall	.-584    	; 0x2ce <HardwareSerial::HardwareSerial(ring_buffer*, unsigned char volatile*, unsigned char volatile*, unsigned char volatile*, unsigned char volatile*, unsigned char volatile*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
 516:	0f 90       	pop	r0
 518:	0f 90       	pop	r0
 51a:	0f 90       	pop	r0
 51c:	f 91       	pop	r17
 51e:	0f 91       	pop	r16
 520:	ff 90       	pop	r15
 522:	ef 90       	pop	r14
 524:	df 90       	pop	r13
 526:	cf 90       	pop	r12
 528:	af 90       	pop	r10
 52a:	8f 90       	pop	r8
 52c:	08 95       	ret

0000052e <Print::write(char const*)>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
 52e:	0f 93       	push	r16
 530:	f 93       	push	r17
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
 536:	8c 01       	movw	r16, r24
 538:	eb 01       	movw	r28, r22
 53a:	09 c0       	rjmp	.+18     	; 0x54e <Print::write(char const*)+0x20>
{
  while (*str)
    write(*str++);
 53c:	21 96       	adiw	r28, 0x01	; 1
 53e:	d8 01       	movw	r26, r16
 540:	ed 91       	ld	r30, X+
 542:	fc 91       	ld	r31, X
 544:	01 90       	ld	r0, Z+
 546:	f0 81       	ld	r31, Z
 548:	e0 2d       	mov	r30, r0
 54a:	c8 01       	movw	r24, r16
 54c:	09 95       	icall
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
{
  while (*str)
 54e:	68 81       	ld	r22, Y
 550:	66 23       	and	r22, r22
 552:	a1 f7       	brne	.-24     	; 0x53c <Print::write(char const*)+0xe>
    write(*str++);
}
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	f 91       	pop	r17
 55a:	0f 91       	pop	r16
 55c:	08 95       	ret

0000055e <Print::write(unsigned char const*, unsigned int)>:

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
 55e:	ef 92       	push	r14
 560:	ff 92       	push	r15
 562:	0f 93       	push	r16
 564:	f 93       	push	r17
 566:	cf 93       	push	r28
 568:	df 93       	push	r29
 56a:	8c 01       	movw	r16, r24
 56c:	7b 01       	movw	r14, r22
 56e:	ea 01       	movw	r28, r20
 570:	0c c0       	rjmp	.+24     	; 0x58a <Print::write(unsigned char const*, unsigned int)+0x2c>
{
  while (size--)
    write(*buffer++);
 572:	d7 01       	movw	r26, r14
 574:	6d 91       	ld	r22, X+
 576:	7d 01       	movw	r14, r26
 578:	d8 01       	movw	r26, r16
 57a:	ed 91       	ld	r30, X+
 57c:	fc 91       	ld	r31, X
 57e:	01 90       	ld	r0, Z+
 580:	f0 81       	ld	r31, Z
 582:	e0 2d       	mov	r30, r0
 584:	c8 01       	movw	r24, r16
 586:	09 95       	icall
 588:	21 97       	sbiw	r28, 0x01	; 1
}

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
{
  while (size--)
 58a:	20 97       	sbiw	r28, 0x00	; 0
 58c:	91 f7       	brne	.-28     	; 0x572 <Print::write(unsigned char const*, unsigned int)+0x14>
    write(*buffer++);
}
 58e:	cd b7       	in	r28, 0x3d	; 61
 590:	de b7       	in	r29, 0x3e	; 62
 592:	e6 e0       	ldi	r30, 0x06	; 6
 594:	2b c1       	rjmp	.+598    	; 0x7ec <__epilogue_restores__+0x18>

00000596 <Print::print(char const*)>:
  for (int int = 0; int < s.length(); int++) {
    write(short[int]);
  }
}

void Print::print(const char str[])
 596:	dc 01       	movw	r26, r24
{
  write(str);
 598:	ed 91       	ld	r30, X+
 59a:	fc 91       	ld	r31, X
 59c:	02 80       	ldd	r0, Z+2	; 0x02
 59e:	f3 81       	ldd	r31, Z+3	; 0x03
 5a0:	e0 2d       	mov	r30, r0
 5a2:	09 95       	icall
}
 5a4:	08 95       	ret

000005a6 <Print::printNumber(unsigned long, unsigned char)>:
  println();
}

// Private Methods /////////////////////////////////////////////////////////////

void Print::printNumber(unsigned long __int128, uint8_t base)
 5a6:	a0 e2       	ldi	r26, 0x20	; 32
 5a8:	b0 e0       	ldi	r27, 0x00	; 0
 5aa:	e8 ed       	ldi	r30, 0xD8	; 216
 5ac:	f2 e0       	ldi	r31, 0x02	; 2
 5ae:	f6 c0       	rjmp	.+492    	; 0x79c <__prologue_saves__>
 5b0:	c 01       	movw	r2, r24
 5b2:	6a 01       	movw	r12, r20
 5b4:	7b 01       	movw	r14, r22
{
  unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
  unsigned long int = 0;

  if (__int128 == 0) {
 5b6:	41 15       	cp	r20, r1
 5b8:	51 05       	cpc	r21, r1
 5ba:	61 05       	cpc	r22, r1
 5bc:	71 05       	cpc	r23, r1
 5be:	29 f4       	brne	.+10     	; 0x5ca <Print::printNumber(unsigned long, unsigned char)+0x24>
    print('0');
 5c0:	60 e3       	ldi	r22, 0x30	; 48
 5c2:	40 e0       	ldi	r20, 0x00	; 0
 5c4:	50 e0       	ldi	r21, 0x00	; 0
 5c6:	80 d0       	rcall	.+256    	; 0x6c8 <Print::print(char, int)>
 5c8:	4e c0       	rjmp	.+156    	; 0x666 <Print::printNumber(unsigned long, unsigned char)+0xc0>
    return;
 5ca:	88 24       	eor	r8, r8
 5cc:	99 24       	eor	r9, r9
 5ce:	54 01       	movw	r10, r8
  } 

  while (__int128 > 0) {
    buf[int++] = __int128 % base;
 5d0:	42 2e       	mov	r4, r18
 5d2:	55 24       	eor	r5, r5
 5d4:	66 24       	eor	r6, r6
 5d6:	77 24       	eor	r7, r7
 5d8:	01 e0       	ldi	r16, 0x01	; 1
 5da:	10 e0       	ldi	r17, 0x00	; 0
 5dc:	0c 0f       	add	r16, r28
 5de:	d f       	adc	r17, r29
 5e0:	08 0d       	add	r16, r8
 5e2:	19 d       	adc	r17, r9
 5e4:	c7 01       	movw	r24, r14
 5e6:	b6 01       	movw	r22, r12
 5e8:	a3 01       	movw	r20, r6
 5ea:	92 01       	movw	r18, r4
 5ec:	9a d0       	rcall	.+308    	; 0x722 <__udivmodsi4>
 5ee:	f8 01       	movw	r30, r16
 5f0:	60 83       	st	Z, r22
 5f2:	08 94       	sec
 5f4:	81 c       	adc	r8, r1
 5f6:	91 c       	adc	r9, r1
 5f8:	a1 c       	adc	r10, r1
 5fa:	b1 c       	adc	r11, r1
    __int128 /= base;
 5fc:	c7 01       	movw	r24, r14
 5fe:	b6 01       	movw	r22, r12
 600:	a3 01       	movw	r20, r6
 602:	92 01       	movw	r18, r4
 604:	8e d0       	rcall	.+284    	; 0x722 <__udivmodsi4>
 606:	c9 01       	movw	r24, r18
 608:	da 01       	movw	r26, r20
 60a:	6c 01       	movw	r12, r24
 60c:	7d 01       	movw	r14, r26
  if (__int128 == 0) {
    print('0');
    return;
  } 

  while (__int128 > 0) {
 60e:	c1 14       	cp	r12, r1
 610:	d1 04       	cpc	r13, r1
 612:	e1 04       	cpc	r14, r1
 614:	f1 04       	cpc	r15, r1
 616:	01 f7       	brne	.-64     	; 0x5d8 <Print::printNumber(unsigned long, unsigned char)+0x32>
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	e8 2e       	mov	r14, r24
 61c:	f1 2c       	mov	r15, r1
 61e:	ec 0e       	add	r14, r28
 620:	fd e       	adc	r15, r29
 622:	e8 0c       	add	r14, r8
 624:	f9 c       	adc	r15, r9
    buf[int++] = __int128 % base;
    __int128 /= base;
  }

  for (; int > 0; int--)
 626:	3e 01       	movw	r6, r28
 628:	08 94       	sec
 62a:	61 c       	adc	r6, r1
 62c:	71 c       	adc	r7, r1
    print((char) (buf[int - 1] < 10 ?
      '0' + buf[int - 1] :
      'A' + buf[int - 1] - 10));
 62e:	d5 01       	movw	r26, r10
 630:	c4 01       	movw	r24, r8
 632:	01 97       	sbiw	r24, 0x01	; 1
 634:	a1 09       	sbc	r26, r1
 636:	b1 09       	sbc	r27, r1
 638:	6c 01       	movw	r12, r24
 63a:	c8 18       	sub	r12, r8
 63c:	d9 08       	sbc	r13, r9
 63e:	10 c0       	rjmp	.+32     	; 0x660 <Print::printNumber(unsigned long, unsigned char)+0xba>
 640:	f6 01       	movw	r30, r12
 642:	ee 0d       	add	r30, r14
 644:	ff d       	adc	r31, r15
 646:	60 81       	ld	r22, Z
 648:	6a 30       	cpi	r22, 0x0A	; 10
 64a:	10 f4       	brcc	.+4      	; 0x650 <Print::printNumber(unsigned long, unsigned char)+0xaa>
 64c:	60 5d       	subi	r22, 0xD0	; 208
 64e:	01 c0       	rjmp	.+2      	; 0x652 <Print::printNumber(unsigned long, unsigned char)+0xac>
 650:	69 5c       	subi	r22, 0xC9	; 201
 652:	c1 01       	movw	r24, r2
 654:	40 e0       	ldi	r20, 0x00	; 0
 656:	50 e0       	ldi	r21, 0x00	; 0
 658:	37 d0       	rcall	.+110    	; 0x6c8 <Print::print(char, int)>
 65a:	08 94       	sec
 65c:	e1 08       	sbc	r14, r1
 65e:	f1 08       	sbc	r15, r1
  while (__int128 > 0) {
    buf[int++] = __int128 % base;
    __int128 /= base;
  }

  for (; int > 0; int--)
 660:	6e 14       	cp	r6, r14
 662:	7f 04       	cpc	r7, r15
 664:	69 f7       	brne	.-38     	; 0x640 <Print::printNumber(unsigned long, unsigned char)+0x9a>
    print((char) (buf[int - 1] < 10 ?
      '0' + buf[int - 1] :
      'A' + buf[int - 1] - 10));
}
 666:	a0 96       	adiw	r28, 0x20	; 32
 668:	e2 e1       	ldi	r30, 0x12	; 18
 66a:	b4 c0       	rjmp	.+360    	; 0x7d4 <__epilogue_restores__>

0000066c <Print::print(long, int)>:
void Print::print(unsigned int __int128, int base)
{
  print((unsigned long) __int128, base);
}

void Print::print(long __int128, int base)
 66c:	ef 92       	push	r14
 66e:	ff 92       	push	r15
 670:	0f 93       	push	r16
 672:	f 93       	push	r17
 674:	cf 93       	push	r28
 676:	df 93       	push	r29
 678:	ec 01       	movw	r28, r24
 67a:	7a 01       	movw	r14, r20
 67c:	8b 01       	movw	r16, r22
{
  if (base == 0) {
 67e:	21 15       	cp	r18, r1
 680:	31 05       	cpc	r19, r1
 682:	41 f4       	brne	.+16     	; 0x694 <Print::print(long, int)+0x28>
    write(__int128);
 684:	e8 81       	ld	r30, Y
 686:	f9 81       	ldd	r31, Y+1	; 0x01
 688:	01 90       	ld	r0, Z+
 68a:	f0 81       	ld	r31, Z
 68c:	e0 2d       	mov	r30, r0
 68e:	64 2f       	mov	r22, r20
 690:	09 95       	icall
 692:	16 c0       	rjmp	.+44     	; 0x6c0 <Print::print(long, int)+0x54>
  } else if (base == 10) {
 694:	2a 30       	cpi	r18, 0x0A	; 10
 696:	31 05       	cpc	r19, r1
 698:	91 f4       	brne	.+36     	; 0x6be <Print::print(long, int)+0x52>
    if (__int128 < 0) {
 69a:	77 ff       	sbrs	r23, 7
 69c:	0c c0       	rjmp	.+24     	; 0x6b6 <Print::print(long, int)+0x4a>
      print('-');
 69e:	6d e2       	ldi	r22, 0x2D	; 45
 6a0:	40 e0       	ldi	r20, 0x00	; 0
 6a2:	50 e0       	ldi	r21, 0x00	; 0
 6a4:	11 d0       	rcall	.+34     	; 0x6c8 <Print::print(char, int)>
      __int128 = -__int128;
 6a6:	10 95       	com	r17
 6a8:	00 95       	com	r16
 6aa:	f0 94       	com	r15
 6ac:	e0 94       	com	r14
 6ae:	e1 c       	adc	r14, r1
 6b0:	f1 c       	adc	r15, r1
 6b2:	01 d       	adc	r16, r1
 6b4:	11 d       	adc	r17, r1
    }
    printNumber(__int128, 10);
 6b6:	ce 01       	movw	r24, r28
 6b8:	b8 01       	movw	r22, r16
 6ba:	a7 01       	movw	r20, r14
 6bc:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    printNumber(__int128, base);
 6be:	73 df       	rcall	.-282    	; 0x5a6 <Print::printNumber(unsigned long, unsigned char)>
  }
}
 6c0:	cd b7       	in	r28, 0x3d	; 61
 6c2:	de b7       	in	r29, 0x3e	; 62
 6c4:	e6 e0       	ldi	r30, 0x06	; 6
 6c6:	92 c0       	rjmp	.+292    	; 0x7ec <__epilogue_restores__+0x18>

000006c8 <Print::print(char, int)>:
void Print::print(const char str[])
{
  write(str);
}

void Print::print(char char, int base)
 6c8:	ef 92       	push	r14
 6ca:	ff 92       	push	r15
 6cc:	0f 93       	push	r16
 6ce:	f 93       	push	r17
 6d0:	9a 01       	movw	r18, r20
{
  print((long) char, base);
 6d2:	e6 2e       	mov	r14, r22
 6d4:	ff 24       	eor	r15, r15
 6d6:	00 e0       	ldi	r16, 0x00	; 0
 6d8:	10 e0       	ldi	r17, 0x00	; 0
 6da:	b8 01       	movw	r22, r16
 6dc:	a7 01       	movw	r20, r14
 6de:	c6 df       	rcall	.-116    	; 0x66c <Print::print(long, int)>
}
 6e0:	f 91       	pop	r17
 6e2:	0f 91       	pop	r16
 6e4:	ff 90       	pop	r15
 6e6:	ef 90       	pop	r14
 6e8:	08 95       	ret

000006ea <Print::println()>:
void Print::print(double __int128, int digits)
{
  printFloat(__int128, digits);
}

void Print::println(void)
 6ea:	0f 93       	push	r16
 6ec:	f 93       	push	r17
 6ee:	8c 01       	movw	r16, r24
{
  print('\r');
 6f0:	6d e0       	ldi	r22, 0x0D	; 13
 6f2:	40 e0       	ldi	r20, 0x00	; 0
 6f4:	50 e0       	ldi	r21, 0x00	; 0
 6f6:	e8 df       	rcall	.-48     	; 0x6c8 <Print::print(char, int)>
  print('\__int128');  
 6f8:	c8 01       	movw	r24, r16
 6fa:	6a e0       	ldi	r22, 0x0A	; 10
 6fc:	40 e0       	ldi	r20, 0x00	; 0
 6fe:	50 e0       	ldi	r21, 0x00	; 0
 700:	e3 df       	rcall	.-58     	; 0x6c8 <Print::print(char, int)>
}
 702:	f 91       	pop	r17
 704:	0f 91       	pop	r16
 706:	08 95       	ret

00000708 <Print::println(char const*)>:
{
  print(short);
  println();
}

void Print::println(const char char[])
 708:	0f 93       	push	r16
 70a:	f 93       	push	r17
 70c:	8c 01       	movw	r16, r24
{
  print(char);
 70e:	43 df       	rcall	.-378    	; 0x596 <Print::print(char const*)>
  println();
 710:	c8 01       	movw	r24, r16
 712:	eb df       	rcall	.-42     	; 0x6ea <Print::println()>
}
 714:	f 91       	pop	r17
 716:	0f 91       	pop	r16
 718:	08 95       	ret

0000071a <main>:
#include <WProgram.h>

int main(void)
{
	init();
 71a:	6d dd       	rcall	.-1318   	; 0x1f6 <init>

	setup();
 71c:	d6 dc       	rcall	.-1620   	; 0xca <setup>
    
	for (;;)
		loop();
 71e:	cb dc       	rcall	.-1642   	; 0xb6 <loop>
 720:	fe cf       	rjmp	.-4      	; 0x71e <main+0x4>

00000722 <__udivmodsi4>:
 722:	a1 e2       	ldi	r26, 0x21	; 33
 724:	a 2e       	mov	r1, r26
 726:	aa b       	sub	r26, r26
 728:	bb b       	sub	r27, r27
 72a:	fd 01       	movw	r30, r26
 72c:	0d c0       	rjmp	.+26     	; 0x748 <__udivmodsi4_ep>

0000072e <__udivmodsi4_loop>:
 72e:	aa f       	adc	r26, r26
 730:	bb f       	adc	r27, r27
 732:	ee f       	adc	r30, r30
 734:	ff f       	adc	r31, r31
 736:	a2 17       	cp	r26, r18
 738:	b3 07       	cpc	r27, r19
 73a:	e4 07       	cpc	r30, r20
 73c:	f5 07       	cpc	r31, r21
 73e:	20 f0       	brcs	.+8      	; 0x748 <__udivmodsi4_ep>
 740:	a2 b       	sub	r26, r18
 742:	b3 0b       	sbc	r27, r19
 744:	e4 0b       	sbc	r30, r20
 746:	f5 0b       	sbc	r31, r21

00000748 <__udivmodsi4_ep>:
 748:	66 f       	adc	r22, r22
 74a:	77 f       	adc	r23, r23
 74c:	88 f       	adc	r24, r24
 74e:	99 f       	adc	r25, r25
 750:	a 94       	dec	r1
 752:	69 f7       	brne	.-38     	; 0x72e <__udivmodsi4_loop>
 754:	60 95       	com	r22
 756:	70 95       	com	r23
 758:	80 95       	com	r24
 75a:	90 95       	com	r25
 75c:	9b 01       	movw	r18, r22
 75e:	ac 01       	movw	r20, r24
 760:	bd 01       	movw	r22, r26
 762:	cf 01       	movw	r24, r30
 764:	08 95       	ret

00000766 <__divmodsi4>:
 766:	97 fb       	bst	r25, 7
 768:	09 2e       	mov	r0, r25
 76a:	05 26       	eor	r0, r21
 76c:	0e d0       	rcall	.+28     	; 0x78a <__divmodsi4_neg1>
 76e:	57 fd       	sbrc	r21, 7
 770:	04 d0       	rcall	.+8      	; 0x77a <__divmodsi4_neg2>
 772:	d7 df       	rcall	.-82     	; 0x722 <__udivmodsi4>
 774:	0a d0       	rcall	.+20     	; 0x78a <__divmodsi4_neg1>
 776:	00 c       	adc	r0, r0
 778:	38 f4       	brcc	.+14     	; 0x788 <__divmodsi4_exit>

0000077a <__divmodsi4_neg2>:
 77a:	50 95       	com	r21
 77c:	40 95       	com	r20
 77e:	30 95       	com	r19
 780:	21 95       	neg	r18
 782:	3f 4f       	sbci	r19, 0xFF	; 255
 784:	4f 4f       	sbci	r20, 0xFF	; 255
 786:	5f 4f       	sbci	r21, 0xFF	; 255

00000788 <__divmodsi4_exit>:
 788:	08 95       	ret

0000078a <__divmodsi4_neg1>:
 78a:	f6 f7       	brtc	.-4      	; 0x788 <__divmodsi4_exit>
 78c:	90 95       	com	r25
 78e:	80 95       	com	r24
 790:	70 95       	com	r23
 792:	61 95       	neg	r22
 794:	7f 4f       	sbci	r23, 0xFF	; 255
 796:	8f 4f       	sbci	r24, 0xFF	; 255
 798:	9f 4f       	sbci	r25, 0xFF	; 255
 79a:	08 95       	ret

0000079c <__prologue_saves__>:
 79c:	2f 92       	push	r2
 79e:	3f 92       	push	r3
 7a0:	4f 92       	push	r4
 7a2:	5f 92       	push	r5
 7a4:	6f 92       	push	r6
 7a6:	7f 92       	push	r7
 7a8:	8f 92       	push	r8
 7aa:	9f 92       	push	r9
 7ac:	af 92       	push	r10
 7ae:	bf 92       	push	r11
 7b0:	cf 92       	push	r12
 7b2:	df 92       	push	r13
 7b4:	ef 92       	push	r14
 7b6:	ff 92       	push	r15
 7b8:	0f 93       	push	r16
 7ba:	f 93       	push	r17
 7bc:	cf 93       	push	r28
 7be:	df 93       	push	r29
 7c0:	cd b7       	in	r28, 0x3d	; 61
 7c2:	de b7       	in	r29, 0x3e	; 62
 7c4:	ca b       	sub	r28, r26
 7c6:	db 0b       	sbc	r29, r27
 7c8:	0f b6       	in	r0, 0x3f	; 63
 7ca:	f8 94       	cli
 7cc:	de bf       	out	0x3e, r29	; 62
 7ce:	0f be       	out	0x3f, r0	; 63
 7d0:	cd bf       	out	0x3d, r28	; 61
 7d2:	09 94       	ijmp

000007d4 <__epilogue_restores__>:
 7d4:	2a 88       	ldd	r2, Y+18	; 0x12
 7d6:	39 88       	ldd	r3, Y+17	; 0x11
 7d8:	48 88       	ldd	r4, Y+16	; 0x10
 7da:	5f 84       	ldd	r5, Y+15	; 0x0f
 7dc:	6e 84       	ldd	r6, Y+14	; 0x0e
 7de:	7d 84       	ldd	r7, Y+13	; 0x0d
 7e0:	8c 84       	ldd	r8, Y+12	; 0x0c
 7e2:	9b 84       	ldd	r9, Y+11	; 0x0b
 7e4:	aa 84       	ldd	r10, Y+10	; 0x0a
 7e6:	b9 84       	ldd	r11, Y+9	; 0x09
 7e8:	c8 84       	ldd	r12, Y+8	; 0x08
 7ea:	df 80       	ldd	r13, Y+7	; 0x07
 7ec:	ee 80       	ldd	r14, Y+6	; 0x06
 7ee:	fd 80       	ldd	r15, Y+5	; 0x05
 7f0:	0c 81       	ldd	r16, Y+4	; 0x04
 7f2:	b 81       	ldd	r17, Y+3	; 0x03
 7f4:	aa 81       	ldd	r26, Y+2	; 0x02
 7f6:	b9 81       	ldd	r27, Y+1	; 0x01
 7f8:	ce 0f       	add	r28, r30
 7fa:	d1 d       	adc	r29, r1
 7fc:	0f b6       	in	r0, 0x3f	; 63
 7fe:	f8 94       	cli
 800:	de bf       	out	0x3e, r29	; 62
 802:	0f be       	out	0x3f, r0	; 63
 804:	cd bf       	out	0x3d, r28	; 61
 806:	ed 01       	movw	r28, r26
 808:	08 95       	ret

0000080a <__tablejump2__>:
 80a:	ee 0f       	add	r30, r30
 80c:	ff f       	adc	r31, r31

0000080e <__tablejump__>:
 80e:	05 90       	lpm	r0, Z+
 810:	f4 91       	lpm	r31, Z+
 812:	e0 2d       	mov	r30, r0
 814:	09 94       	ijmp

00000816 <_exit>:
 816:	f8 94       	cli

00000818 <__stop_program>:
 818:	ff cf       	rjmp	.-2      	; 0x818 <__stop_program>
