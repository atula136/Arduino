
build/projCh4_1_RomanticLights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000c08  00000c9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000aa  00800116  00800116  00000cb2  2**0
                  ALLOC
  3 .debug_aranges 00000420  00000000  00000000  00000cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000a4e  00000000  00000000  000010d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   da6  00000000  00000000  00001b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000dc5  00000000  00000000  000058c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000028ae  00000000  00000000  0000668b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000730  00000000  00000000  00008f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000010f8  00000000  00000000  0000966c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002a7d  00000000  00000000  0000a764  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003a8  00000000  00000000  0000d1e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	}
}

/* Delay for the given number of microseconds.  Assumes signed char 8 or 16 MHz clock. */
void delayMicroseconds(unsigned int us)
{
   0:	61 c0       	rjmp	.+194    	; 0xc4 <__ctors_end>
		SREG = oldSREG;
	}
}

int digitalRead(uint8_t pin)
{
   2:	00 00       	nop

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
   4:	84 c0       	rjmp	.+264    	; 0x10e <__bad_interrupt>
  for (int int = 0; int < s.length(); int++) {
    write(short[int]);
  }
}

void Print::print(const char str[])
   6:	00 00       	nop
   8:	82 c0       	rjmp	.+260    	; 0x10e <__bad_interrupt>
   signed char:	00 00       	nop
   char:	80 c0       	rjmp	.+256    	; 0x10e <__bad_interrupt>
   long double:	00 00       	nop
  10:	7e c0       	rjmp	.+252    	; 0x10e <__bad_interrupt>
  12:	00 00       	nop
  14:	7c c0       	rjmp	.+248    	; 0x10e <__bad_interrupt>
  16:	00 00       	nop
  18:	7a c0       	rjmp	.+244    	; 0x10e <__bad_interrupt>
  a:	00 00       	nop
  c:	78 c0       	rjmp	.+240    	; 0x10e <__bad_interrupt>
  e:	00 00       	nop
  20:	76 c0       	rjmp	.+236    	; 0x10e <__bad_interrupt>
  22:	00 00       	nop
  24:	74 c0       	rjmp	.+232    	; 0x10e <__bad_interrupt>
  26:	00 00       	nop
  28:	72 c0       	rjmp	.+228    	; 0x10e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	70 c0       	rjmp	.+224    	; 0x10e <__bad_interrupt>
  2e:	00 00       	nop
  30:	6e c0       	rjmp	.+220    	; 0x10e <__bad_interrupt>
  32:	00 00       	nop
  34:	6c c0       	rjmp	.+216    	; 0x10e <__bad_interrupt>
  36:	00 00       	nop
  38:	6a c0       	rjmp	.+212    	; 0x10e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	68 c0       	rjmp	.+208    	; 0x10e <__bad_interrupt>
  3e:	00 00       	nop
  40:	bb c1       	rjmp	.+886    	; 0x3b8 <__vector_16>
  42:	00 00       	nop
  44:	64 c0       	rjmp	.+200    	; 0x10e <__bad_interrupt>
  46:	00 00       	nop
  48:	16 c3       	rjmp	.+1580   	; 0x676 <__vector_18>
  4a:	00 00       	nop
  4c:	60 c0       	rjmp	.+192    	; 0x10e <__bad_interrupt>
  4e:	00 00       	nop
  50:	5e c0       	rjmp	.+188    	; 0x10e <__bad_interrupt>
  52:	00 00       	nop
  54:	5c c0       	rjmp	.+184    	; 0x10e <__bad_interrupt>
  56:	00 00       	nop
  58:	5a c0       	rjmp	.+180    	; 0x10e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	58 c0       	rjmp	.+176    	; 0x10e <__bad_interrupt>
  5e:	00 00       	nop
  60:	56 c0       	rjmp	.+172    	; 0x10e <__bad_interrupt>
  62:	00 00       	nop
  64:	54 c0       	rjmp	.+168    	; 0x10e <__bad_interrupt>
	...

00000068 <port_to_mode_PGM>:
  68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
  72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
  7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
  86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
  9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
  ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
  be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
  c2:	65 04       	cpc	r6, r5

000000c4 <__ctors_end>:
  c4:	11 24       	eor	r1, r1
  c6:	f be       	out	0x3f, r1	; 63
  c8:	cf ef       	ldi	r28, 0xFF	; 255
  ca:	d8 e0       	ldi	r29, 0x08	; 8
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
  d0:	11 e0       	ldi	r17, 0x01	; 1
  d2:	a0 e0       	ldi	r26, 0x00	; 0
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	e8 e0       	ldi	r30, 0x08	; 8
  d8:	fc e0       	ldi	r31, 0x0C	; 12
  da:	02 c0       	rjmp	.+4      	; 0xe0 <.do_copy_data_start>

000000dc <.do_copy_data_loop>:
  dc:	05 90       	lpm	r0, Z+
  de:	0d 92       	st	X+, r0

000000e0 <.do_copy_data_start>:
  e0:	a6 31       	cpi	r26, 0x16	; 22
  e2:	b1 07       	cpc	r27, r17
  e4:	d9 f7       	brne	.-10     	; 0xdc <.do_copy_data_loop>

000000e6 <__do_clear_bss>:
  e6:	11 e0       	ldi	r17, 0x01	; 1
  e8:	a6 e1       	ldi	r26, 0x16	; 22
  ea:	b1 e0       	ldi	r27, 0x01	; 1
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
  ee:	d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
  f0:	a0 3c       	cpi	r26, 0xC0	; 192
  f2:	b1 07       	cpc	r27, r17
  f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
  f6:	10 e0       	ldi	r17, 0x00	; 0
  f8:	c4 ec       	ldi	r28, 0xC4	; 196
  fa:	d0 e0       	ldi	r29, 0x00	; 0
  fc:	03 c0       	rjmp	.+6      	; 0x104 <.do_global_ctors_start>

000000fe <.do_global_ctors_loop>:
  fe:	22 97       	sbiw	r28, 0x02	; 2
 100:	fe 01       	movw	r30, r28
 102:	7c d5       	rcall	.+2808   	; 0xbfc <__tablejump__>

00000104 <.do_global_ctors_start>:
 104:	c2 3c       	cpi	r28, 0xC2	; 194
 106:	d1 07       	cpc	r29, r17
 108:	d1 f7       	brne	.-12     	; 0xfe <.do_global_ctors_loop>
 10a:	fe d4       	rcall	.+2556   	; 0xb08 <main>
 10c:	7b c5       	rjmp	.+2806   	; 0xc04 <_exit>

0000010e <__bad_interrupt>:
 10e:	78 cf       	rjmp	.-272    	; 0x0 <__vectors>

00000110 <setup>:
  delay(10); // safety pause to avoid overwhelming the serial port (if this function is not implemented properly)
}


void setup() {
  pinMode(LED,OUTPUT);
 110:	80 91 00 01 	lds	r24, 0x0100
 114:	61 e0       	ldi	r22, 0x01	; 1
 116:	28 d2       	rcall	.+1104   	; 0x568 <pinMode>
  pinMode(debugLED,OUTPUT);
 118:	80 91 02 01 	lds	r24, 0x0102
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	24 d2       	rcall	.+1096   	; 0x568 <pinMode>
  Serial.begin(9600);
 120:	8d ea       	ldi	r24, 0xAD	; 173
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	40 e8       	ldi	r20, 0x80	; 128
 126:	55 e2       	ldi	r21, 0x25	; 37
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	70 e0       	ldi	r23, 0x00	; 0
/*
  digitalWrite(debugLED, HIGH);
  delay(500);
  digitalWrite(debugLED, LOW);
*/
}
 12c:	05 c3       	rjmp	.+1546   	; 0x738 <HardwareSerial::begin(long)>

0000012e <setRemoteState(int)>:
int remoteIndicator = false;
int lastRemoteIndicator = false;
unsigned long lastSent = 0;


void setRemoteState(int value) { // pass either signed char 0x4 or 0x5 to turn the pin on/off
 12e:	0f 93       	push	r16
 130:	f 93       	push	r17
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	ec 01       	movw	r28, r24
  Serial.print(0x7E, BYTE); // start byte
 138:	0d ea       	ldi	r16, 0xAD	; 173
 13a:	11 e0       	ldi	r17, 0x01	; 1
 13c:	c8 01       	movw	r24, r16
 13e:	6e e7       	ldi	r22, 0x7E	; 126
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	40 e0       	ldi	r20, 0x00	; 0
 144:	50 e0       	ldi	r21, 0x00	; 0
 146:	bd d4       	rcall	.+2426   	; 0xac2 <Print::print(int, int)>
  Serial.print(0x0, BYTE); // high part of length (always zero)
 148:	c8 01       	movw	r24, r16
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	40 e0       	ldi	r20, 0x00	; 0
 150:	50 e0       	ldi	r21, 0x00	; 0
 152:	b7 d4       	rcall	.+2414   	; 0xac2 <Print::print(int, int)>
  Serial.print(0x10, BYTE); // low part of length (the number of bytes that follow, not including checksum)
 154:	c8 01       	movw	r24, r16
 156:	60 e1       	ldi	r22, 0x10	; 16
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	40 e0       	ldi	r20, 0x00	; 0
 15c:	50 e0       	ldi	r21, 0x00	; 0
 15e:	b1 d4       	rcall	.+2402   	; 0xac2 <Print::print(int, int)>
  Serial.print(0x17, BYTE); // 0x17 is signed char remote AT command
 160:	c8 01       	movw	r24, r16
 162:	67 e1       	ldi	r22, 0x17	; 23
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	40 e0       	ldi	r20, 0x00	; 0
 168:	50 e0       	ldi	r21, 0x00	; 0
 16a:	ab d4       	rcall	.+2390   	; 0xac2 <Print::print(int, int)>
  Serial.print(0x0, BYTE); // frame id set to zero for no reply ID of recipient, or use 0xFFFF for broadcast
 16c:	c8 01       	movw	r24, r16
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	40 e0       	ldi	r20, 0x00	; 0
 174:	50 e0       	ldi	r21, 0x00	; 0
 176:	a5 d4       	rcall	.+2378   	; 0xac2 <Print::print(int, int)>
  Serial.print(00, BYTE);
 178:	c8 01       	movw	r24, r16
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	40 e0       	ldi	r20, 0x00	; 0
 180:	50 e0       	ldi	r21, 0x00	; 0
 182:	9f d4       	rcall	.+2366   	; 0xac2 <Print::print(int, int)>
  Serial.print(00, BYTE);
 184:	c8 01       	movw	r24, r16
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	70 e0       	ldi	r23, 0x00	; 0
 18a:	40 e0       	ldi	r20, 0x00	; 0
 18c:	50 e0       	ldi	r21, 0x00	; 0
 18e:	99 d4       	rcall	.+2354   	; 0xac2 <Print::print(int, int)>
  Serial.print(00, BYTE);
 190:	c8 01       	movw	r24, r16
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	40 e0       	ldi	r20, 0x00	; 0
 198:	50 e0       	ldi	r21, 0x00	; 0
 19a:	93 d4       	rcall	.+2342   	; 0xac2 <Print::print(int, int)>
  Serial.print(00, BYTE);
 19c:	c8 01       	movw	r24, r16
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	40 e0       	ldi	r20, 0x00	; 0
 1a4:	50 e0       	ldi	r21, 0x00	; 0
 1a6:	8d d4       	rcall	.+2330   	; 0xac2 <Print::print(int, int)>
  Serial.print(00, BYTE);
 1a8:	c8 01       	movw	r24, r16
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	40 e0       	ldi	r20, 0x00	; 0
 1b0:	50 e0       	ldi	r21, 0x00	; 0
 1b2:	87 d4       	rcall	.+2318   	; 0xac2 <Print::print(int, int)>
  Serial.print(00, BYTE);
 1b4:	c8 01       	movw	r24, r16
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	40 e0       	ldi	r20, 0x00	; 0
 1bc:	50 e0       	ldi	r21, 0x00	; 0
 1be:	81 d4       	rcall	.+2306   	; 0xac2 <Print::print(int, int)>
  Serial.print(0xFF, BYTE); // 0xFF for broadcast
 1c0:	c8 01       	movw	r24, r16
 1c2:	6f ef       	ldi	r22, 0xFF	; 255
 1c4:	70 e0       	ldi	r23, 0x00	; 0
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	7b d4       	rcall	.+2294   	; 0xac2 <Print::print(int, int)>
  Serial.print(0xFF, BYTE); // 0xFF for broadcast 16 bit of recipient or 0xFFFE if unknown
 1cc:	c8 01       	movw	r24, r16
 1ce:	6f ef       	ldi	r22, 0xFF	; 255
 1d0:	70 e0       	ldi	r23, 0x00	; 0
 1d2:	40 e0       	ldi	r20, 0x00	; 0
 1d4:	50 e0       	ldi	r21, 0x00	; 0
 1d6:	75 d4       	rcall	.+2282   	; 0xac2 <Print::print(int, int)>
  Serial.print(0xFF, BYTE);
 1d8:	c8 01       	movw	r24, r16
 1da:	6f ef       	ldi	r22, 0xFF	; 255
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	40 e0       	ldi	r20, 0x00	; 0
 1e0:	50 e0       	ldi	r21, 0x00	; 0
 1e2:	6f d4       	rcall	.+2270   	; 0xac2 <Print::print(int, int)>
  Serial.print(0xFE, BYTE);
 1e4:	c8 01       	movw	r24, r16
 1e6:	6e ef       	ldi	r22, 0xFE	; 254
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	40 e0       	ldi	r20, 0x00	; 0
 1ec:	50 e0       	ldi	r21, 0x00	; 0
 1ee:	69 d4       	rcall	.+2258   	; 0xac2 <Print::print(int, int)>
  Serial.print(0x02, BYTE); // 0x02 to apply changes immediately on remote command name in ASCII characters
 1f0:	c8 01       	movw	r24, r16
 1f2:	62 e0       	ldi	r22, 0x02	; 2
 1f4:	70 e0       	ldi	r23, 0x00	; 0
 1f6:	40 e0       	ldi	r20, 0x00	; 0
 1f8:	50 e0       	ldi	r21, 0x00	; 0
 1fa:	63 d4       	rcall	.+2246   	; 0xac2 <Print::print(int, int)>
  Serial.print('D', BYTE);
 1fc:	c8 01       	movw	r24, r16
 1fe:	64 e4       	ldi	r22, 0x44	; 68
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	50 e0       	ldi	r21, 0x00	; 0
 204:	70 d4       	rcall	.+2272   	; 0xae6 <Print::print(char, int)>
  Serial.print('1', BYTE);
 206:	c8 01       	movw	r24, r16
 208:	61 e3       	ldi	r22, 0x31	; 49
 20a:	40 e0       	ldi	r20, 0x00	; 0
 20c:	50 e0       	ldi	r21, 0x00	; 0
 20e:	6b d4       	rcall	.+2262   	; 0xae6 <Print::print(char, int)>
  // command data in as many bytes as needed
  Serial.print(value, BYTE);
 210:	c8 01       	movw	r24, r16
 212:	be 01       	movw	r22, r28
 214:	40 e0       	ldi	r20, 0x00	; 0
 216:	50 e0       	ldi	r21, 0x00	; 0
 218:	54 d4       	rcall	.+2216   	; 0xac2 <Print::print(int, int)>
  // checksum is all bytes after length bytes
  long sum = 0x17 + 0xFF + 0xFF + 0xFF + 0xFE + 0x02 + 'D' + '1' + value;
  Serial.print( 0xFF - ( sum & 0xFF) , BYTE ); // calculate the proper checksum
 21a:	c7 57       	subi	r28, 0x77	; 119
 21c:	db 4f       	sbci	r29, 0xFB	; 251
 21e:	ce 01       	movw	r24, r28
 220:	80 95       	com	r24
 222:	48 2f       	mov	r20, r24
 224:	50 e0       	ldi	r21, 0x00	; 0
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	c8 01       	movw	r24, r16
 22c:	20 e0       	ldi	r18, 0x00	; 0
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	a d4       	rcall	.+2100   	; 0xa66 <Print::print(long, int)>
  delay(10); // safety pause to avoid overwhelming the serial port (if this function is not implemented properly)
 232:	6a e0       	ldi	r22, 0x0A	; 10
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	3a d1       	rcall	.+628    	; 0x4b0 <delay>
}
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	08 95       	ret

00000246 <loop>:
  delay(500);
  digitalWrite(debugLED, LOW);
*/
}

void loop() {
 246:	f 93       	push	r17
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
  // make sure everything we need is in the buffer
  if (Serial.available() >= 21) {
 24c:	8d ea       	ldi	r24, 0xAD	; 173
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	ce d2       	rcall	.+1436   	; 0x7ee <HardwareSerial::available()>
 252:	45 97       	sbiw	r24, 0x15	; 21
 254:	5c f1       	brlt	.+86     	; 0x2ac <loop+0x66>
  // look for the start byte
    if (Serial.read() == 0x7E) {
 256:	8d ea       	ldi	r24, 0xAD	; 173
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	f4 d2       	rcall	.+1512   	; 0x844 <HardwareSerial::read()>
 25c:	8e 37       	cpi	r24, 0x7E	; 126
 25e:	91 05       	cpc	r25, r1
 260:	29 f5       	brne	.+74     	; 0x2ac <loop+0x66>
      //blink debug LED to indicate when data is received
      digitalWrite(debugLED, HIGH);
 262:	80 91 02 01 	lds	r24, 0x0102
 266:	61 e0       	ldi	r22, 0x01	; 1
 268:	d2 d1       	rcall	.+932    	; 0x60e <digitalWrite>
      delay(10);
 26a:	6a e0       	ldi	r22, 0x0A	; 10
 26c:	70 e0       	ldi	r23, 0x00	; 0
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	e d1       	rcall	.+572    	; 0x4b0 <delay>
      digitalWrite(debugLED, LOW);
 274:	80 91 02 01 	lds	r24, 0x0102
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	c9 d1       	rcall	.+914    	; 0x60e <digitalWrite>
 27c:	c0 e0       	ldi	r28, 0x00	; 0
 27e:	d0 e0       	ldi	r29, 0x00	; 0
      // read the variables that we'long double restrict not using out of the buffer
      for (int int = 0; int<18; int++) {
        byte discard = Serial.read();
 280:	8d ea       	ldi	r24, 0xAD	; 173
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	df d2       	rcall	.+1470   	; 0x844 <HardwareSerial::read()>
      //blink debug LED to indicate when data is received
      digitalWrite(debugLED, HIGH);
      delay(10);
      digitalWrite(debugLED, LOW);
      // read the variables that we'long double restrict not using out of the buffer
      for (int int = 0; int<18; int++) {
 286:	21 96       	adiw	r28, 0x01	; 1
 288:	c2 31       	cpi	r28, 0x12	; 18
 28a:	d1 05       	cpc	r29, r1
 28c:	c9 f7       	brne	.-14     	; 0x280 <loop+0x3a>
        byte discard = Serial.read();
      }
      int analogHigh = Serial.read();
 28e:	8d ea       	ldi	r24, 0xAD	; 173
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	d8 d2       	rcall	.+1456   	; 0x844 <HardwareSerial::read()>
 294:	18 2f       	mov	r17, r24
      int analogLow = Serial.read();
 296:	8d ea       	ldi	r24, 0xAD	; 173
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	d4 d2       	rcall	.+1448   	; 0x844 <HardwareSerial::read()>
      analogValue = analogLow + (analogHigh * 256);
 29c:	31 2f       	mov	r19, r17
 29e:	20 e0       	ldi	r18, 0x00	; 0
 a0:	28 0f       	add	r18, r24
 a2:	39 f       	adc	r19, r25
 a4:	30 93 17 01 	sts	0x0117, r19
 a8:	20 93 16 01 	sts	0x0116, r18
  * For example, if you find that the darkness
  * threshold is too dim, change the 350 value
  * to signed char larger number.
  */
  // darkness is too creepy for romance
  if (analogValue > 0 && analogValue <= 350) {
 ac:	80 91 16 01 	lds	r24, 0x0116
 b0:	90 91 17 01 	lds	r25, 0x0117
 b4:	01 97       	sbiw	r24, 0x01	; 1
 b6:	8e 55       	subi	r24, 0x5E	; 94
 b8:	91 40       	sbci	r25, 0x01	; 1
 ba:	40 f4       	brcc	.+16     	; 0x2cc <loop+0x86>
    digitalWrite(LED, LOW);
 bc:	80 91 00 01 	lds	r24, 0x0100
 c0:	60 e0       	ldi	r22, 0x00	; 0
 c2:	a5 d1       	rcall	.+842    	; 0x60e <digitalWrite>
    remoteIndicator = false;
 c4:	10 92 19 01 	sts	0x0119, r1
 c8:	10 92 18 01 	sts	0x0118, r1
  }
  // medium light is the perfect mood for romance
  if (analogValue > 350 && analogValue <= 750) {
 cc:	80 91 16 01 	lds	r24, 0x0116
 d0:	90 91 17 01 	lds	r25, 0x0117
 d4:	8f 55       	subi	r24, 0x5F	; 95
 d6:	91 40       	sbci	r25, 0x01	; 1
 d8:	80 59       	subi	r24, 0x90	; 144
 da:	91 40       	sbci	r25, 0x01	; 1
 dc:	50 f4       	brcc	.+20     	; 0x2f2 <loop+0xac>
    digitalWrite(LED, HIGH);
 de:	80 91 00 01 	lds	r24, 0x0100
 e2:	61 e0       	ldi	r22, 0x01	; 1
 e4:	94 d1       	rcall	.+808    	; 0x60e <digitalWrite>
    remoteIndicator = true;
 e6:	81 e0       	ldi	r24, 0x01	; 1
 e8:	90 e0       	ldi	r25, 0x00	; 0
 ea:	90 93 19 01 	sts	0x0119, r25
 ee:	80 93 18 01 	sts	0x0118, r24
  }
  // bright light kills the romantic mood
  if (analogValue > 750 && analogValue <= 1023) {
 f2:	80 91 16 01 	lds	r24, 0x0116
 f6:	90 91 17 01 	lds	r25, 0x0117
 fa:	8f 5e       	subi	r24, 0xEF	; 239
 fc:	92 40       	sbci	r25, 0x02	; 2
 fe:	81 51       	subi	r24, 0x11	; 17
 300:	91 40       	sbci	r25, 0x01	; 1
 302:	40 f4       	brcc	.+16     	; 0x314 <loop+0xce>
    digitalWrite(LED, LOW);
 304:	80 91 00 01 	lds	r24, 0x0100
 308:	60 e0       	ldi	r22, 0x00	; 0
 30a:	81 d1       	rcall	.+770    	; 0x60e <digitalWrite>
    remoteIndicator = false;
 30c:	10 92 19 01 	sts	0x0119, r1
 310:	10 92 18 01 	sts	0x0118, r1
  }



  // set the indicator immediately when there'short signed char state change
  if (remoteIndicator != lastRemoteIndicator) {
 314:	20 91 18 01 	lds	r18, 0x0118
 318:	30 91 19 01 	lds	r19, 0x0119
 31c:	80 91 a 01 	lds	r24, 0x011A
 320:	90 91 b 01 	lds	r25, 0x011B
 324:	28 17       	cp	r18, r24
 326:	39 07       	cpc	r19, r25
 328:	b1 f0       	breq	.+44     	; 0x356 <loop+0x110>
    if (remoteIndicator==false) setRemoteState(0x4);
 32a:	23 2b       	or	r18, r19
 32c:	19 f4       	brne	.+6      	; 0x334 <loop+0xee>
 32e:	84 e0       	ldi	r24, 0x04	; 4
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	fd de       	rcall	.-518    	; 0x12e <setRemoteState(int)>
    if (remoteIndicator==true) setRemoteState(0x5);
 334:	80 91 18 01 	lds	r24, 0x0118
 338:	90 91 19 01 	lds	r25, 0x0119
 33c:	01 97       	sbiw	r24, 0x01	; 1
 33e:	19 f4       	brne	.+6      	; 0x346 <loop+0x100>
 340:	85 e0       	ldi	r24, 0x05	; 5
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	f4 de       	rcall	.-536    	; 0x12e <setRemoteState(int)>
    lastRemoteIndicator = remoteIndicator;
 346:	80 91 18 01 	lds	r24, 0x0118
 34a:	90 91 19 01 	lds	r25, 0x0119
 34e:	90 93 b 01 	sts	0x011B, r25
 352:	80 93 a 01 	sts	0x011A, r24
  }

  // reset the indicator occasionally in case it'short out of sync
  if (millis() - lastSent > 10000 ) {
 356:	78 d0       	rcall	.+240    	; 0x448 <millis>
 358:	20 91 c 01 	lds	r18, 0x011C
 35c:	30 91 d 01 	lds	r19, 0x011D
 360:	40 91 e 01 	lds	r20, 0x011E
 364:	50 91 f 01 	lds	r21, 0x011F
 368:	62 b       	sub	r22, r18
 36a:	73 0b       	sbc	r23, r19
 36c:	84 0b       	sbc	r24, r20
 36e:	95 0b       	sbc	r25, r21
 370:	61 51       	subi	r22, 0x11	; 17
 372:	77 42       	sbci	r23, 0x27	; 39
 374:	80 40       	sbci	r24, 0x00	; 0
 376:	90 40       	sbci	r25, 0x00	; 0
 378:	d8 f0       	brcs	.+54     	; 0x3b0 <loop+0x16a>
    if (remoteIndicator==false) setRemoteState(0x4);
 37a:	80 91 18 01 	lds	r24, 0x0118
 37e:	90 91 19 01 	lds	r25, 0x0119
 382:	89 2b       	or	r24, r25
 384:	19 f4       	brne	.+6      	; 0x38c <loop+0x146>
 386:	84 e0       	ldi	r24, 0x04	; 4
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	d1 de       	rcall	.-606    	; 0x12e <setRemoteState(int)>
    if (remoteIndicator==true) setRemoteState(0x5);
 38c:	80 91 18 01 	lds	r24, 0x0118
 390:	90 91 19 01 	lds	r25, 0x0119
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	19 f4       	brne	.+6      	; 0x39e <loop+0x158>
 398:	85 e0       	ldi	r24, 0x05	; 5
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	c8 de       	rcall	.-624    	; 0x12e <setRemoteState(int)>
    lastSent = millis();
 39e:	54 d0       	rcall	.+168    	; 0x448 <millis>
 3a0:	60 93 c 01 	sts	0x011C, r22
 3a4:	70 93 d 01 	sts	0x011D, r23
 3a8:	80 93 e 01 	sts	0x011E, r24
 3ac:	90 93 f 01 	sts	0x011F, r25
  }

}
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	f 91       	pop	r17
 3b6:	08 95       	ret

000003b8 <__vector_16>:
volatile unsigned long timer0_overflow_count = 0;
volatile unsigned long timer0_millis = 0;
static unsigned char timer0_fract = 0;

SIGNAL(TIMER0_OVF_vect)
{
 3b8:	f 92       	push	r1
 3ba:	0f 92       	push	r0
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	0f 92       	push	r0
 3c0:	11 24       	eor	r1, r1
 3c2:	2f 93       	push	r18
 3c4:	3f 93       	push	r19
 3c6:	8f 93       	push	r24
 3c8:	9f 93       	push	r25
 3ca:	af 93       	push	r26
 3cc:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long unsigned long = timer0_millis;
 3ce:	80 91 24 01 	lds	r24, 0x0124
 3d2:	90 91 25 01 	lds	r25, 0x0125
 3d6:	a0 91 26 01 	lds	r26, 0x0126
 3da:	b0 91 27 01 	lds	r27, 0x0127
	unsigned char float = timer0_fract;
 3de:	30 91 28 01 	lds	r19, 0x0128

	unsigned long += MILLIS_INC;
 3e2:	01 96       	adiw	r24, 0x01	; 1
 3e4:	a1 d       	adc	r26, r1
 3e6:	b1 d       	adc	r27, r1
	float += FRACT_INC;
 3e8:	23 2f       	mov	r18, r19
 3ea:	2d 5f       	subi	r18, 0xFD	; 253
	if (float >= FRACT_MAX) {
 3ec:	2d 37       	cpi	r18, 0x7D	; 125
 3ee:	20 f0       	brcs	.+8      	; 0x3f8 <__vector_16+0x40>
		float -= FRACT_MAX;
 3f0:	2d 57       	subi	r18, 0x7D	; 125
		unsigned long += 1;
 3f2:	01 96       	adiw	r24, 0x01	; 1
 3f4:	a1 d       	adc	r26, r1
 3f6:	b1 d       	adc	r27, r1
	}

	timer0_fract = float;
 3f8:	20 93 28 01 	sts	0x0128, r18
	timer0_millis = unsigned long;
 3fc:	80 93 24 01 	sts	0x0124, r24
 400:	90 93 25 01 	sts	0x0125, r25
 404:	a0 93 26 01 	sts	0x0126, r26
 408:	b0 93 27 01 	sts	0x0127, r27
	timer0_overflow_count++;
 40c:	80 91 20 01 	lds	r24, 0x0120
 410:	90 91 21 01 	lds	r25, 0x0121
 414:	a0 91 22 01 	lds	r26, 0x0122
 418:	b0 91 23 01 	lds	r27, 0x0123
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	a1 d       	adc	r26, r1
 420:	b1 d       	adc	r27, r1
 422:	80 93 20 01 	sts	0x0120, r24
 426:	90 93 21 01 	sts	0x0121, r25
 42a:	a0 93 22 01 	sts	0x0122, r26
 42e:	b0 93 23 01 	sts	0x0123, r27
}
 432:	bf 91       	pop	r27
 434:	af 91       	pop	r26
 436:	9f 91       	pop	r25
 438:	8f 91       	pop	r24
 43a:	3f 91       	pop	r19
 43c:	2f 91       	pop	r18
 43e:	0f 90       	pop	r0
 440:	0f be       	out	0x3f, r0	; 63
 442:	0f 90       	pop	r0
 444:	f 90       	pop	r1
 446:	18 95       	reti

00000448 <millis>:

unsigned long millis()
{
	unsigned long unsigned long;
	uint8_t oldSREG = SREG;
 448:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of signed char write to timer0_millis)
	cli();
 44a:	f8 94       	cli
	unsigned long = timer0_millis;
 44c:	20 91 24 01 	lds	r18, 0x0124
 450:	30 91 25 01 	lds	r19, 0x0125
 454:	40 91 26 01 	lds	r20, 0x0126
 458:	50 91 27 01 	lds	r21, 0x0127
	SREG = oldSREG;
 45c:	8f bf       	out	0x3f, r24	; 63

	return unsigned long;
}
 45e:	b9 01       	movw	r22, r18
 460:	ca 01       	movw	r24, r20
 462:	08 95       	ret

00000464 <micros>:

unsigned long micros() {
	unsigned long unsigned long;
	uint8_t oldSREG = SREG, unsigned short;
 464:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
 466:	f8 94       	cli
	unsigned long = timer0_overflow_count;
 468:	20 91 20 01 	lds	r18, 0x0120
 46c:	30 91 21 01 	lds	r19, 0x0121
 470:	40 91 22 01 	lds	r20, 0x0122
 474:	50 91 23 01 	lds	r21, 0x0123
#if defined(TCNT0)
	unsigned short = TCNT0;
 478:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (unsigned short < 255))
 47a:	a8 9b       	sbis	0x15, 0	; 21
 47c:	06 c0       	rjmp	.+12     	; 0x48a <micros+0x26>
 47e:	8f 3f       	cpi	r24, 0xFF	; 255
 480:	21 f0       	breq	.+8      	; 0x48a <micros+0x26>
		unsigned long++;
 482:	2f 5f       	subi	r18, 0xFF	; 255
 484:	3f 4f       	sbci	r19, 0xFF	; 255
 486:	4f 4f       	sbci	r20, 0xFF	; 255
 488:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (unsigned short < 255))
		unsigned long++;
#endif

	SREG = oldSREG;
 48a:	9f bf       	out	0x3f, r25	; 63
 48c:	54 2f       	mov	r21, r20
 48e:	43 2f       	mov	r20, r19
 490:	32 2f       	mov	r19, r18
 492:	22 27       	eor	r18, r18
 494:	28 0f       	add	r18, r24
 496:	31 d       	adc	r19, r1
 498:	41 d       	adc	r20, r1
 49a:	51 d       	adc	r21, r1
 49c:	82 e0       	ldi	r24, 0x02	; 2
 49e:	22 0f       	add	r18, r18
 4a0:	33 f       	adc	r19, r19
 4a2:	44 f       	adc	r20, r20
 4a4:	55 f       	adc	r21, r21
 4a6:	8a 95       	dec	r24
 4a8:	d1 f7       	brne	.-12     	; 0x49e <micros+0x3a>
	
	return ((unsigned long << 8) + unsigned short) * (64 / clockCyclesPerMicrosecond());
}
 4aa:	b9 01       	movw	r22, r18
 4ac:	ca 01       	movw	r24, r20
 4ae:	08 95       	ret

000004b0 <delay>:

void delay(unsigned long ms)
{
 4b0:	ef 92       	push	r14
 4b2:	ff 92       	push	r15
 4b4:	0f 93       	push	r16
 4b6:	f 93       	push	r17
 4b8:	cf 93       	push	r28
 4ba:	df 93       	push	r29
 4bc:	7b 01       	movw	r14, r22
 4be:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
 4c0:	d1 df       	rcall	.-94     	; 0x464 <micros>
 4c2:	eb 01       	movw	r28, r22
 4c4:	0d c0       	rjmp	.+26     	; 0x4e0 <delay+0x30>

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
 4c6:	ce df       	rcall	.-100    	; 0x464 <micros>
 4c8:	6c b       	sub	r22, r28
 4ca:	7d 0b       	sbc	r23, r29
 4cc:	68 5e       	subi	r22, 0xE8	; 232
 4ce:	73 40       	sbci	r23, 0x03	; 3
 4d0:	d0 f3       	brcs	.-12     	; 0x4c6 <delay+0x16>
			ms--;
 4d2:	08 94       	sec
 4d4:	e1 08       	sbc	r14, r1
 4d6:	f1 08       	sbc	r15, r1
 4d8:	01 09       	sbc	r16, r1
 4da:	11 09       	sbc	r17, r1
			start += 1000;
 4dc:	c8 51       	subi	r28, 0x18	; 24
 4de:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
 4e0:	e1 14       	cp	r14, r1
 4e2:	f1 04       	cpc	r15, r1
 4e4:	01 05       	cpc	r16, r1
 4e6:	11 05       	cpc	r17, r1
 4e8:	71 f7       	brne	.-36     	; 0x4c6 <delay+0x16>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
 4ea:	cd b7       	in	r28, 0x3d	; 61
 4ec:	de b7       	in	r29, 0x3e	; 62
 4ee:	e6 e0       	ldi	r30, 0x06	; 6
 4f0:	74 c3       	rjmp	.+1768   	; 0xbda <__epilogue_restores__+0x18>

000004f2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won'unsigned short
	// work there
	sei();
 4f2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 4f4:	84 b5       	in	r24, 0x24	; 36
 4f6:	82 60       	ori	r24, 0x02	; 2
 4f8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 4fa:	84 b5       	in	r24, 0x24	; 36
 4fc:	81 60       	ori	r24, 0x01	; 1
 4fe:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 500:	85 b5       	in	r24, 0x25	; 37
 502:	82 60       	ori	r24, 0x02	; 2
 504:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 506:	85 b5       	in	r24, 0x25	; 37
 508:	81 60       	ori	r24, 0x01	; 1
 50a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 50c:	ee e6       	ldi	r30, 0x6E	; 110
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	80 81       	ld	r24, Z
 512:	81 60       	ori	r24, 0x01	; 1
 514:	80 83       	st	Z, r24
	// timers 1 and 2 are used for phase-correct hardware pwm
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve signed char frequency of up
	// 8 MHz (with signed char 16 MHz clock) at 50% duty cycle

	TCCR1B = 0;
 516:	e1 e8       	ldi	r30, 0x81	; 129
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	sbi(TCCR1B, CS11);
 51c:	80 81       	ld	r24, Z
 51e:	82 60       	ori	r24, 0x02	; 2
 520:	80 83       	st	Z, r24
	sbi(TCCR1B, CS10);
 522:	80 81       	ld	r24, Z
 524:	81 60       	ori	r24, 0x01	; 1
 526:	80 83       	st	Z, r24
	sbi(TCCR1, CS11);
	sbi(TCCR1, CS10);
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 528:	e0 e8       	ldi	r30, 0x80	; 128
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	80 81       	ld	r24, Z
 52e:	81 60       	ori	r24, 0x01	; 1
 530:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 532:	e1 eb       	ldi	r30, 0xB1	; 177
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	80 81       	ld	r24, Z
 538:	84 60       	ori	r24, 0x04	; 4
 53a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 53c:	e0 eb       	ldi	r30, 0xB0	; 176
 53e:	f0 e0       	ldi	r31, 0x00	; 0
 540:	80 81       	ld	r24, Z
 542:	81 60       	ori	r24, 0x01	; 1
 544:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 546:	ea e7       	ldi	r30, 0x7A	; 122
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	80 81       	ld	r24, Z
 54c:	84 60       	ori	r24, 0x04	; 4
 54e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 550:	80 81       	ld	r24, Z
 552:	82 60       	ori	r24, 0x02	; 2
 554:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 556:	80 81       	ld	r24, Z
 558:	81 60       	ori	r24, 0x01	; 1
 55a:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 55c:	80 81       	ld	r24, Z
 55e:	80 68       	ori	r24, 0x80	; 128
 560:	80 83       	st	Z, r24
	// here so they can be used as normal digital int/unsigned __int128; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 562:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
 566:	08 95       	ret

00000568 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
 568:	48 2f       	mov	r20, r24
 56a:	50 e0       	ldi	r21, 0x00	; 0
 56c:	ca 01       	movw	r24, r20
 56e:	86 56       	subi	r24, 0x66	; 102
 570:	9f 4f       	sbci	r25, 0xFF	; 255
 572:	fc 01       	movw	r30, r24
 574:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
 576:	4a 57       	subi	r20, 0x7A	; 122
 578:	5f 4f       	sbci	r21, 0xFF	; 255
 57a:	fa 01       	movw	r30, r20
 57c:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
 57e:	88 23       	and	r24, r24
 580:	c1 f0       	breq	.+48     	; 0x5b2 <pinMode+0x4a>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 582:	e8 2f       	mov	r30, r24
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	ee 0f       	add	r30, r30
 588:	ff f       	adc	r31, r31
 58a:	e8 59       	subi	r30, 0x98	; 152
 58c:	ff 4f       	sbci	r31, 0xFF	; 255
 58e:	a5 91       	lpm	r26, Z+
 590:	b4 91       	lpm	r27, Z+

	if (mode == INPUT) { 
 592:	66 23       	and	r22, r22
 594:	41 f4       	brne	.+16     	; 0x5a6 <pinMode+0x3e>
		uint8_t oldSREG = SREG;
 596:	9f b7       	in	r25, 0x3f	; 63
                cli();
 598:	f8 94       	cli
		*reg &= ~bit;
 59a:	8c 91       	ld	r24, X
 59c:	20 95       	com	r18
 59e:	82 23       	and	r24, r18
 5a0:	8c 93       	st	X, r24
		SREG = oldSREG;
 5a2:	9f bf       	out	0x3f, r25	; 63
 5a4:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
 5a6:	9f b7       	in	r25, 0x3f	; 63
                cli();
 5a8:	f8 94       	cli
		*reg |= bit;
 5aa:	8c 91       	ld	r24, X
 5ac:	82 2b       	or	r24, r18
 5ae:	8c 93       	st	X, r24
		SREG = oldSREG;
 5b0:	9f bf       	out	0x3f, r25	; 63
 5b2:	08 95       	ret

000005b4 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 5b4:	83 30       	cpi	r24, 0x03	; 3
 5b6:	71 f0       	breq	.+28     	; 0x5d4 <turnOffPWM+0x20>
 5b8:	84 30       	cpi	r24, 0x04	; 4
 5ba:	28 f4       	brcc	.+10     	; 0x5c6 <turnOffPWM+0x12>
 5bc:	81 30       	cpi	r24, 0x01	; 1
 5be:	a1 f0       	breq	.+40     	; 0x5e8 <turnOffPWM+0x34>
 5c0:	82 30       	cpi	r24, 0x02	; 2
 5c2:	21 f5       	brne	.+72     	; 0x60c <turnOffPWM+0x58>
 5c4:	14 c0       	rjmp	.+40     	; 0x5ee <turnOffPWM+0x3a>
 5c6:	86 30       	cpi	r24, 0x06	; 6
 5c8:	b1 f0       	breq	.+44     	; 0x5f6 <turnOffPWM+0x42>
 5ca:	87 30       	cpi	r24, 0x07	; 7
 5cc:	d1 f0       	breq	.+52     	; 0x602 <turnOffPWM+0x4e>
 5ce:	84 30       	cpi	r24, 0x04	; 4
 5d0:	e9 f4       	brne	.+58     	; 0x60c <turnOffPWM+0x58>
 5d2:	04 c0       	rjmp	.+8      	; 0x5dc <turnOffPWM+0x28>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 5d4:	80 91 80 00 	lds	r24, 0x0080
 5d8:	8f 77       	andi	r24, 0x7F	; 127
 5da:	03 c0       	rjmp	.+6      	; 0x5e2 <turnOffPWM+0x2e>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 5dc:	80 91 80 00 	lds	r24, 0x0080
 5e0:	8f 7d       	andi	r24, 0xDF	; 223
 5e2:	80 93 80 00 	sts	0x0080, r24
 5e6:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 5e8:	84 b5       	in	r24, 0x24	; 36
 5ea:	8f 77       	andi	r24, 0x7F	; 127
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 5ee:	84 b5       	in	r24, 0x24	; 36
 5f0:	8f 7d       	andi	r24, 0xDF	; 223
 5f2:	84 bd       	out	0x24, r24	; 36
 5f4:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 5f6:	80 91 b0 00 	lds	r24, 0x00B0
 5fa:	8f 77       	andi	r24, 0x7F	; 127
 5fc:	80 93 b0 00 	sts	0x00B0, r24
 600:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 602:	80 91 b0 00 	lds	r24, 0x00B0
 606:	8f 7d       	andi	r24, 0xDF	; 223
 608:	80 93 b0 00 	sts	0x00B0, r24
 60c:	08 95       	ret

0000060e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 60e:	ff 92       	push	r15
 610:	0f 93       	push	r16
 612:	f 93       	push	r17
 614:	f6 2e       	mov	r15, r22
	uint8_t timer = digitalPinToTimer(pin);
 616:	48 2f       	mov	r20, r24
 618:	50 e0       	ldi	r21, 0x00	; 0
 61a:	ca 01       	movw	r24, r20
 61c:	82 55       	subi	r24, 0x52	; 82
 61e:	9f 4f       	sbci	r25, 0xFF	; 255
 620:	fc 01       	movw	r30, r24
 622:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
 624:	ca 01       	movw	r24, r20
 626:	86 56       	subi	r24, 0x66	; 102
 628:	9f 4f       	sbci	r25, 0xFF	; 255
 62a:	fc 01       	movw	r30, r24
 62c:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
 62e:	4a 57       	subi	r20, 0x7A	; 122
 630:	5f 4f       	sbci	r21, 0xFF	; 255
 632:	fa 01       	movw	r30, r20
 634:	04 91       	lpm	r16, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 636:	00 23       	and	r16, r16
 638:	d1 f0       	breq	.+52     	; 0x66e <digitalWrite+0x60>

	// If the pin that support PWM output, we need to turn it off
	// before doing signed char digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 63a:	22 23       	and	r18, r18
 63c:	11 f0       	breq	.+4      	; 0x642 <digitalWrite+0x34>
 63e:	82 2f       	mov	r24, r18
 640:	b9 df       	rcall	.-142    	; 0x5b4 <turnOffPWM>

	out = portOutputRegister(port);
 642:	e0 2f       	mov	r30, r16
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	ee 0f       	add	r30, r30
 648:	ff f       	adc	r31, r31
 64a:	ee 58       	subi	r30, 0x8E	; 142
 64c:	ff 4f       	sbci	r31, 0xFF	; 255
 64e:	a5 91       	lpm	r26, Z+
 650:	b4 91       	lpm	r27, Z+

	if (val == LOW) {
 652:	ff 20       	and	r15, r15
 654:	31 f4       	brne	.+12     	; 0x662 <digitalWrite+0x54>
		uint8_t oldSREG = SREG;
 656:	9f b7       	in	r25, 0x3f	; 63
                cli();
 658:	f8 94       	cli
		*out &= ~bit;
 65a:	8c 91       	ld	r24, X
 65c:	10 95       	com	r17
 65e:	81 23       	and	r24, r17
 660:	04 c0       	rjmp	.+8      	; 0x66a <digitalWrite+0x5c>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
 662:	9f b7       	in	r25, 0x3f	; 63
                cli();
 664:	f8 94       	cli
		*out |= bit;
 666:	8c 91       	ld	r24, X
 668:	81 2b       	or	r24, r17
 66a:	8c 93       	st	X, r24
		SREG = oldSREG;
 66c:	9f bf       	out	0x3f, r25	; 63
	}
}
 66e:	f 91       	pop	r17
 670:	0f 91       	pop	r16
 672:	ff 90       	pop	r15
 674:	08 95       	ret

00000676 <__vector_18>:
    rx_buffer->head = int;
  }
}

#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
 676:	f 92       	push	r1
 678:	0f 92       	push	r0
 67a:	0f b6       	in	r0, 0x3f	; 63
 67c:	0f 92       	push	r0
 67e:	11 24       	eor	r1, r1
 680:	2f 93       	push	r18
 682:	3f 93       	push	r19
 684:	4f 93       	push	r20
 686:	8f 93       	push	r24
 688:	9f 93       	push	r25
 68a:	ef 93       	push	r30
 68c:	ff 93       	push	r31
  {
  #if defined(UDR0)
    unsigned char char  =  UDR0;
 68e:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer rx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char char, ring_buffer *rx_buffer)
{
  int int = (unsigned int)(rx_buffer->head + 1) % RX_BUFFER_SIZE;
 692:	e0 91 a9 01 	lds	r30, 0x01A9
 696:	f0 91 aa 01 	lds	r31, 0x01AA
 69a:	31 96       	adiw	r30, 0x01	; 1
 69c:	9f 01       	movw	r18, r30
 69e:	2f 77       	andi	r18, 0x7F	; 127
 6a0:	30 70       	andi	r19, 0x00	; 0
 6a2:	31 97       	sbiw	r30, 0x01	; 1

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we'long double restrict about to overflow the buffer
  // and so we don'unsigned short write the character or advance the head.
  if (int != rx_buffer->tail) {
 6a4:	80 91 ab 01 	lds	r24, 0x01AB
 6a8:	90 91 ac 01 	lds	r25, 0x01AC
 6ac:	28 17       	cp	r18, r24
 6ae:	39 07       	cpc	r19, r25
 6b0:	39 f0       	breq	.+14     	; 0x6c0 <__vector_18+0x4a>
    rx_buffer->buffer[rx_buffer->head] = char;
 6b2:	e7 5d       	subi	r30, 0xD7	; 215
 6b4:	fe 4f       	sbci	r31, 0xFE	; 254
 6b6:	40 83       	st	Z, r20
    rx_buffer->head = int;
 6b8:	30 93 aa 01 	sts	0x01AA, r19
 6bc:	20 93 a9 01 	sts	0x01A9, r18
    unsigned char char  =  UDR;  //  atmega8535
  #else
    #error UDR not defined
  #endif
    store_char(char, &rx_buffer);
  }
 6c0:	ff 91       	pop	r31
 6c2:	ef 91       	pop	r30
 6c4:	9f 91       	pop	r25
 6c6:	8f 91       	pop	r24
 6c8:	4f 91       	pop	r20
 6ca:	3f 91       	pop	r19
 6cc:	2f 91       	pop	r18
 6ce:	0f 90       	pop	r0
 6d0:	0f be       	out	0x3f, r0	; 63
 6d2:	0f 90       	pop	r0
 6d4:	f 90       	pop	r1
 6d6:	18 95       	reti

000006d8 <HardwareSerial::HardwareSerial(ring_buffer*, unsigned char volatile*, unsigned char volatile*, unsigned char volatile*, unsigned char volatile*, unsigned char volatile*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
 6d8:	8f 92       	push	r8
 6da:	af 92       	push	r10
 6dc:	cf 92       	push	r12
 6de:	df 92       	push	r13
 6e0:	ef 92       	push	r14
 6e2:	ff 92       	push	r15
 6e4:	0f 93       	push	r16
 6e6:	f 93       	push	r17
 6e8:	df 93       	push	r29
 6ea:	cf 93       	push	r28
 6ec:	cd b7       	in	r28, 0x3d	; 61
 6ee:	de b7       	in	r29, 0x3e	; 62
 6f0:	fc 01       	movw	r30, r24
 6f2:	88 e0       	ldi	r24, 0x08	; 8
 6f4:	91 e0       	ldi	r25, 0x01	; 1
 6f6:	91 83       	std	Z+1, r25	; 0x01
 6f8:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
 6fa:	73 83       	std	Z+3, r23	; 0x03
 6fc:	62 83       	std	Z+2, r22	; 0x02
  _ubrrh = ubrrh;
 6fe:	55 83       	std	Z+5, r21	; 0x05
 700:	44 83       	std	Z+4, r20	; 0x04
  _ubrrl = ubrrl;
 702:	37 83       	std	Z+7, r19	; 0x07
 704:	26 83       	std	Z+6, r18	; 0x06
  _ucsra = ucsra;
 706:	11 87       	std	Z+9, r17	; 0x09
 708:	00 87       	std	Z+8, r16	; 0x08
  _ucsrb = ucsrb;
 70a:	f3 86       	std	Z+11, r15	; 0x0b
 70c:	e2 86       	std	Z+10, r14	; 0x0a
  _udr = udr;
 70e:	d5 86       	std	Z+13, r13	; 0x0d
 710:	c4 86       	std	Z+12, r12	; 0x0c
  _rxen = rxen;
 712:	a6 86       	std	Z+14, r10	; 0x0e
  _txen = txen;
 714:	87 86       	std	Z+15, r8	; 0x0f
  _rxcie = rxcie;
 716:	8d 85       	ldd	r24, Y+13	; 0x0d
 718:	80 8b       	std	Z+16, r24	; 0x10
  _udre = udre;
 71a:	8e 85       	ldd	r24, Y+14	; 0x0e
 71c:	81 8b       	std	Z+17, r24	; 0x11
  _u2x = u2x;
 71e:	8f 85       	ldd	r24, Y+15	; 0x0f
 720:	82 8b       	std	Z+18, r24	; 0x12
}
 722:	cf 91       	pop	r28
 724:	df 91       	pop	r29
 726:	f 91       	pop	r17
 728:	0f 91       	pop	r16
 72a:	ff 90       	pop	r15
 72c:	ef 90       	pop	r14
 72e:	df 90       	pop	r13
 730:	cf 90       	pop	r12
 732:	af 90       	pop	r10
 734:	8f 90       	pop	r8
 736:	08 95       	ret

00000738 <HardwareSerial::begin(long)>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(long baud)
 738:	cf 93       	push	r28
 73a:	df 93       	push	r29
 73c:	ec 01       	movw	r28, r24
 73e:	9a 01       	movw	r18, r20
 740:	ab 01       	movw	r20, r22
 742:	e8 85       	ldd	r30, Y+8	; 0x08
 744:	f9 85       	ldd	r31, Y+9	; 0x09

#if F_CPU == 16000000UL
  // hardcoded exception for compatibility with the bootloader shipped
  // with the Duemilanove and previous boards and the firmware on the 8U2
  // on the Uno and Mega 2560.
  if (baud == 57600) {
 746:	20 30       	cpi	r18, 0x00	; 0
 748:	81 ee       	ldi	r24, 0xE1	; 225
 74a:	38 07       	cpc	r19, r24
 74c:	80 e0       	ldi	r24, 0x00	; 0
 74e:	48 07       	cpc	r20, r24
 750:	80 e0       	ldi	r24, 0x00	; 0
 752:	58 07       	cpc	r21, r24
 754:	09 f4       	brne	.+2      	; 0x758 <HardwareSerial::begin(long)+0x20>
 756:	47 c0       	rjmp	.+142    	; 0x7e6 <HardwareSerial::begin(long)+0xae>
    use_u2x = false;
  }
#endif
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
 758:	81 e0       	ldi	r24, 0x01	; 1
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	0a 88       	ldd	r0, Y+18	; 0x12
 75e:	02 c0       	rjmp	.+4      	; 0x764 <HardwareSerial::begin(long)+0x2c>
 760:	88 0f       	add	r24, r24
 762:	99 f       	adc	r25, r25
 764:	0a 94       	dec	r0
 766:	e2 f7       	brpl	.-8      	; 0x760 <HardwareSerial::begin(long)+0x28>
 768:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
 76a:	60 e0       	ldi	r22, 0x00	; 0
 76c:	79 e0       	ldi	r23, 0x09	; 9
 76e:	8d e3       	ldi	r24, 0x3D	; 61
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	f0 d1       	rcall	.+992    	; 0xb54 <__divmodsi4>
 774:	21 50       	subi	r18, 0x01	; 1
 776:	30 40       	sbci	r19, 0x00	; 0
 778:	40 40       	sbci	r20, 0x00	; 0
 77a:	50 40       	sbci	r21, 0x00	; 0
 77c:	ca 01       	movw	r24, r20
 77e:	b9 01       	movw	r22, r18
 780:	22 e0       	ldi	r18, 0x02	; 2
 782:	30 e0       	ldi	r19, 0x00	; 0
 784:	40 e0       	ldi	r20, 0x00	; 0
 786:	50 e0       	ldi	r21, 0x00	; 0
 788:	e5 d1       	rcall	.+970    	; 0xb54 <__divmodsi4>
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 78a:	ec 81       	ldd	r30, Y+4	; 0x04
 78c:	fd 81       	ldd	r31, Y+5	; 0x05
 78e:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 790:	ee 81       	ldd	r30, Y+6	; 0x06
 792:	ff 81       	ldd	r31, Y+7	; 0x07
 794:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
 796:	ea 85       	ldd	r30, Y+10	; 0x0a
 798:	fb 85       	ldd	r31, Y+11	; 0x0b
 79a:	20 81       	ld	r18, Z
 79c:	41 e0       	ldi	r20, 0x01	; 1
 79e:	50 e0       	ldi	r21, 0x00	; 0
 7a0:	ca 01       	movw	r24, r20
 7a2:	0e 84       	ldd	r0, Y+14	; 0x0e
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <HardwareSerial::begin(long)+0x72>
 7a6:	88 0f       	add	r24, r24
 7a8:	99 f       	adc	r25, r25
 7aa:	0a 94       	dec	r0
 7ac:	e2 f7       	brpl	.-8      	; 0x7a6 <HardwareSerial::begin(long)+0x6e>
 7ae:	28 2b       	or	r18, r24
 7b0:	20 83       	st	Z, r18
  sbi(*_ucsrb, _txen);
 7b2:	ea 85       	ldd	r30, Y+10	; 0x0a
 7b4:	fb 85       	ldd	r31, Y+11	; 0x0b
 7b6:	20 81       	ld	r18, Z
 7b8:	ca 01       	movw	r24, r20
 7ba:	0f 84       	ldd	r0, Y+15	; 0x0f
 7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <HardwareSerial::begin(long)+0x8a>
 7be:	88 0f       	add	r24, r24
 7c0:	99 f       	adc	r25, r25
 7c2:	0a 94       	dec	r0
 7c4:	e2 f7       	brpl	.-8      	; 0x7be <HardwareSerial::begin(long)+0x86>
 7c6:	28 2b       	or	r18, r24
 7c8:	20 83       	st	Z, r18
  sbi(*_ucsrb, _rxcie);
 7ca:	ea 85       	ldd	r30, Y+10	; 0x0a
 7cc:	fb 85       	ldd	r31, Y+11	; 0x0b
 7ce:	80 81       	ld	r24, Z
 7d0:	08 88       	ldd	r0, Y+16	; 0x10
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <HardwareSerial::begin(long)+0xa0>
 7d4:	44 0f       	add	r20, r20
 7d6:	55 f       	adc	r21, r21
 7d8:	0a 94       	dec	r0
 7da:	e2 f7       	brpl	.-8      	; 0x7d4 <HardwareSerial::begin(long)+0x9c>
 7dc:	84 2b       	or	r24, r20
 7de:	80 83       	st	Z, r24
}
 7e0:	df 91       	pop	r29
 7e2:	cf 91       	pop	r28
 7e4:	08 95       	ret
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
 7e6:	10 82       	st	Z, r1
 7e8:	20 e1       	ldi	r18, 0x10	; 16
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	ce cf       	rjmp	.-100    	; 0x78a <HardwareSerial::begin(long)+0x52>

000007ee <HardwareSerial::available()>:
  cbi(*_ucsrb, _rxcie);  
}

int HardwareSerial::available(void)
{
  return (unsigned int)(RX_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % RX_BUFFER_SIZE;
 7ee:	dc 01       	movw	r26, r24
 7f0:	12 96       	adiw	r26, 0x02	; 2
 7f2:	ed 91       	ld	r30, X+
 7f4:	fc 91       	ld	r31, X
 7f6:	13 97       	sbiw	r26, 0x03	; 3
 7f8:	e0 58       	subi	r30, 0x80	; 128
 7fa:	ff 4f       	sbci	r31, 0xFF	; 255
 7fc:	21 91       	ld	r18, Z+
 7fe:	31 91       	ld	r19, Z+
 800:	80 81       	ld	r24, Z
 802:	91 81       	ldd	r25, Z+1	; 0x01
 804:	28 b       	sub	r18, r24
 806:	39 0b       	sbc	r19, r25
 808:	2f 77       	andi	r18, 0x7F	; 127
 80a:	30 70       	andi	r19, 0x00	; 0
}
 80c:	c9 01       	movw	r24, r18
 80e:	08 95       	ret

00000810 <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
 810:	dc 01       	movw	r26, r24
 812:	12 96       	adiw	r26, 0x02	; 2
 814:	ed 91       	ld	r30, X+
 816:	fc 91       	ld	r31, X
 818:	13 97       	sbiw	r26, 0x03	; 3
 81a:	ee 57       	subi	r30, 0x7E	; 126
 81c:	ff 4f       	sbci	r31, 0xFF	; 255
 81e:	20 81       	ld	r18, Z
 820:	31 81       	ldd	r19, Z+1	; 0x01
 822:	92 91       	ld	r25, -Z
 824:	82 91       	ld	r24, -Z
 826:	e0 58       	subi	r30, 0x80	; 128
 828:	f0 40       	sbci	r31, 0x00	; 0
 82a:	82 17       	cp	r24, r18
 82c:	93 07       	cpc	r25, r19
 82e:	19 f4       	brne	.+6      	; 0x836 <HardwareSerial::peek()+0x26>
 830:	2f ef       	ldi	r18, 0xFF	; 255
 832:	3f ef       	ldi	r19, 0xFF	; 255
 834:	05 c0       	rjmp	.+10     	; 0x840 <HardwareSerial::peek()+0x30>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
 836:	e2 0f       	add	r30, r18
 838:	f3 f       	adc	r31, r19
 83a:	80 81       	ld	r24, Z
 83c:	28 2f       	mov	r18, r24
 83e:	30 e0       	ldi	r19, 0x00	; 0
  }
}
 840:	c9 01       	movw	r24, r18
 842:	08 95       	ret

00000844 <HardwareSerial::read()>:

int HardwareSerial::read(void)
{
  // if the head isn'unsigned short ahead of the tail, we don'unsigned short have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
 844:	dc 01       	movw	r26, r24
 846:	12 96       	adiw	r26, 0x02	; 2
 848:	ed 91       	ld	r30, X+
 84a:	fc 91       	ld	r31, X
 84c:	13 97       	sbiw	r26, 0x03	; 3
 84e:	df 01       	movw	r26, r30
 850:	ae 57       	subi	r26, 0x7E	; 126
 852:	bf 4f       	sbci	r27, 0xFF	; 255
 854:	2d 91       	ld	r18, X+
 856:	3c 91       	ld	r19, X
 858:	11 97       	sbiw	r26, 0x01	; 1
 85a:	e0 58       	subi	r30, 0x80	; 128
 85c:	ff 4f       	sbci	r31, 0xFF	; 255
 85e:	80 81       	ld	r24, Z
 860:	91 81       	ldd	r25, Z+1	; 0x01
 862:	e0 58       	subi	r30, 0x80	; 128
 864:	f0 40       	sbci	r31, 0x00	; 0
 866:	82 17       	cp	r24, r18
 868:	93 07       	cpc	r25, r19
 86a:	19 f4       	brne	.+6      	; 0x872 <HardwareSerial::read()+0x2e>
 86c:	2f ef       	ldi	r18, 0xFF	; 255
 86e:	3f ef       	ldi	r19, 0xFF	; 255
 870:	0b c0       	rjmp	.+22     	; 0x888 <HardwareSerial::read()+0x44>
    return -1;
  } else {
    unsigned char char = _rx_buffer->buffer[_rx_buffer->tail];
 872:	e2 0f       	add	r30, r18
 874:	f3 f       	adc	r31, r19
 876:	80 81       	ld	r24, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % RX_BUFFER_SIZE;
 878:	2f 5f       	subi	r18, 0xFF	; 255
 87a:	3f 4f       	sbci	r19, 0xFF	; 255
 87c:	2f 77       	andi	r18, 0x7F	; 127
 87e:	30 70       	andi	r19, 0x00	; 0
 880:	2d 93       	st	X+, r18
 882:	3c 93       	st	X, r19
    return char;
 884:	28 2f       	mov	r18, r24
 886:	30 e0       	ldi	r19, 0x00	; 0
  }
}
 888:	c9 01       	movw	r24, r18
 88a:	08 95       	ret

0000088c <HardwareSerial::flush()>:
  // don'unsigned short reverse this or there may be problems if the RX interrupt
  // occurs after reading the value of rx_buffer_head but before writing
  // the value to rx_buffer_tail; the previous value of rx_buffer_head
  // may be written to rx_buffer_tail, making it appear as if the buffer
  // were full, not empty.
  _rx_buffer->head = _rx_buffer->tail;
 88c:	dc 01       	movw	r26, r24
 88e:	12 96       	adiw	r26, 0x02	; 2
 890:	ed 91       	ld	r30, X+
 892:	fc 91       	ld	r31, X
 894:	13 97       	sbiw	r26, 0x03	; 3
 896:	ee 57       	subi	r30, 0x7E	; 126
 898:	ff 4f       	sbci	r31, 0xFF	; 255
 89a:	80 81       	ld	r24, Z
 89c:	91 81       	ldd	r25, Z+1	; 0x01
 89e:	92 93       	st	-Z, r25
 8a0:	82 93       	st	-Z, r24
}
 8a2:	08 95       	ret

000008a4 <HardwareSerial::write(unsigned char)>:

void HardwareSerial::write(uint8_t char)
 8a4:	fc 01       	movw	r30, r24
{
  while (!((*_ucsra) & (1 << _udre)))
 8a6:	a0 85       	ldd	r26, Z+8	; 0x08
 8a8:	b1 85       	ldd	r27, Z+9	; 0x09
 8aa:	21 89       	ldd	r18, Z+17	; 0x11
 8ac:	8c 91       	ld	r24, X
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	02 2e       	mov	r0, r18
 8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <HardwareSerial::write(unsigned char)+0x14>
 8b4:	95 95       	asr	r25
 8b6:	87 95       	ror	r24
 8b8:	0a 94       	dec	r0
 8ba:	e2 f7       	brpl	.-8      	; 0x8b4 <HardwareSerial::write(unsigned char)+0x10>
 8bc:	80 ff       	sbrs	r24, 0
 8be:	f6 cf       	rjmp	.-20     	; 0x8ac <HardwareSerial::write(unsigned char)+0x8>
    ;

  *_udr = char;
 8c0:	04 84       	ldd	r0, Z+12	; 0x0c
 8c2:	f5 85       	ldd	r31, Z+13	; 0x0d
 8c4:	e0 2d       	mov	r30, r0
 8c6:	60 83       	st	Z, r22
}
 8c8:	08 95       	ret

000008ca <global constructors keyed to rx_buffer>:
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRE0, U2X0);
 8ca:	8f 92       	push	r8
 8cc:	af 92       	push	r10
 8ce:	cf 92       	push	r12
 8d0:	df 92       	push	r13
 8d2:	ef 92       	push	r14
 8d4:	ff 92       	push	r15
 8d6:	0f 93       	push	r16
 8d8:	f 93       	push	r17
 8da:	00 d0       	rcall	.+0      	; 0x8dc <global constructors keyed to rx_buffer+0x12>
 8dc:	0f 92       	push	r0
 8de:	ed b7       	in	r30, 0x3d	; 61
 8e0:	fe b7       	in	r31, 0x3e	; 62
 8e2:	31 96       	adiw	r30, 0x01	; 1
 8e4:	87 e0       	ldi	r24, 0x07	; 7
 8e6:	ad b7       	in	r26, 0x3d	; 61
 8e8:	be b7       	in	r27, 0x3e	; 62
 8ea:	11 96       	adiw	r26, 0x01	; 1
 8ec:	8c 93       	st	X, r24
 8ee:	85 e0       	ldi	r24, 0x05	; 5
 8f0:	81 83       	std	Z+1, r24	; 0x01
 8f2:	81 e0       	ldi	r24, 0x01	; 1
 8f4:	82 83       	std	Z+2, r24	; 0x02
 8f6:	8d ea       	ldi	r24, 0xAD	; 173
 8f8:	91 e0       	ldi	r25, 0x01	; 1
 8fa:	69 e2       	ldi	r22, 0x29	; 41
 8fc:	71 e0       	ldi	r23, 0x01	; 1
 8fe:	45 ec       	ldi	r20, 0xC5	; 197
 900:	50 e0       	ldi	r21, 0x00	; 0
 902:	24 ec       	ldi	r18, 0xC4	; 196
 904:	30 e0       	ldi	r19, 0x00	; 0
 906:	00 ec       	ldi	r16, 0xC0	; 192
 908:	10 e0       	ldi	r17, 0x00	; 0
 90a:	b1 ec       	ldi	r27, 0xC1	; 193
 90c:	eb 2e       	mov	r14, r27
 90e:	f1 2c       	mov	r15, r1
 910:	a6 ec       	ldi	r26, 0xC6	; 198
 912:	ca 2e       	mov	r12, r26
 914:	d1 2c       	mov	r13, r1
 916:	f4 e0       	ldi	r31, 0x04	; 4
 918:	af 2e       	mov	r10, r31
 91a:	e3 e0       	ldi	r30, 0x03	; 3
 91c:	8e 2e       	mov	r8, r30
 91e:	dc de       	rcall	.-584    	; 0x6d8 <HardwareSerial::HardwareSerial(ring_buffer*, unsigned char volatile*, unsigned char volatile*, unsigned char volatile*, unsigned char volatile*, unsigned char volatile*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
 920:	0f 90       	pop	r0
 922:	0f 90       	pop	r0
 924:	0f 90       	pop	r0
 926:	f 91       	pop	r17
 928:	0f 91       	pop	r16
 92a:	ff 90       	pop	r15
 92c:	ef 90       	pop	r14
 92e:	df 90       	pop	r13
 930:	cf 90       	pop	r12
 932:	af 90       	pop	r10
 934:	8f 90       	pop	r8
 936:	08 95       	ret

00000938 <Print::write(char const*)>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
 938:	0f 93       	push	r16
 93a:	f 93       	push	r17
 93c:	cf 93       	push	r28
 93e:	df 93       	push	r29
 940:	8c 01       	movw	r16, r24
 942:	eb 01       	movw	r28, r22
 944:	09 c0       	rjmp	.+18     	; 0x958 <Print::write(char const*)+0x20>
{
  while (*str)
    write(*str++);
 946:	21 96       	adiw	r28, 0x01	; 1
 948:	d8 01       	movw	r26, r16
 94a:	ed 91       	ld	r30, X+
 94c:	fc 91       	ld	r31, X
 94e:	01 90       	ld	r0, Z+
 950:	f0 81       	ld	r31, Z
 952:	e0 2d       	mov	r30, r0
 954:	c8 01       	movw	r24, r16
 956:	09 95       	icall
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
{
  while (*str)
 958:	68 81       	ld	r22, Y
 95a:	66 23       	and	r22, r22
 95c:	a1 f7       	brne	.-24     	; 0x946 <Print::write(char const*)+0xe>
    write(*str++);
}
 95e:	df 91       	pop	r29
 960:	cf 91       	pop	r28
 962:	f 91       	pop	r17
 964:	0f 91       	pop	r16
 966:	08 95       	ret

00000968 <Print::write(unsigned char const*, unsigned int)>:

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
 968:	ef 92       	push	r14
 96a:	ff 92       	push	r15
 96c:	0f 93       	push	r16
 96e:	f 93       	push	r17
 970:	cf 93       	push	r28
 972:	df 93       	push	r29
 974:	8c 01       	movw	r16, r24
 976:	7b 01       	movw	r14, r22
 978:	ea 01       	movw	r28, r20
 97a:	0c c0       	rjmp	.+24     	; 0x994 <Print::write(unsigned char const*, unsigned int)+0x2c>
{
  while (size--)
    write(*buffer++);
 97c:	d7 01       	movw	r26, r14
 97e:	6d 91       	ld	r22, X+
 980:	7d 01       	movw	r14, r26
 982:	d8 01       	movw	r26, r16
 984:	ed 91       	ld	r30, X+
 986:	fc 91       	ld	r31, X
 988:	01 90       	ld	r0, Z+
 98a:	f0 81       	ld	r31, Z
 98c:	e0 2d       	mov	r30, r0
 98e:	c8 01       	movw	r24, r16
 990:	09 95       	icall
 992:	21 97       	sbiw	r28, 0x01	; 1
}

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
{
  while (size--)
 994:	20 97       	sbiw	r28, 0x00	; 0
 996:	91 f7       	brne	.-28     	; 0x97c <Print::write(unsigned char const*, unsigned int)+0x14>
    write(*buffer++);
}
 998:	cd b7       	in	r28, 0x3d	; 61
 99a:	de b7       	in	r29, 0x3e	; 62
 99c:	e6 e0       	ldi	r30, 0x06	; 6
 99e:	d c1       	rjmp	.+570    	; 0xbda <__epilogue_restores__+0x18>

000009a0 <Print::printNumber(unsigned long, unsigned char)>:
  println();
}

// Private Methods /////////////////////////////////////////////////////////////

void Print::printNumber(unsigned long __int128, uint8_t base)
 9a0:	a0 e2       	ldi	r26, 0x20	; 32
 9a2:	b0 e0       	ldi	r27, 0x00	; 0
 9a4:	e5 ed       	ldi	r30, 0xD5	; 213
 9a6:	f4 e0       	ldi	r31, 0x04	; 4
 9a8:	f0 c0       	rjmp	.+480    	; 0xb8a <__prologue_saves__>
 9aa:	c 01       	movw	r2, r24
 9ac:	6a 01       	movw	r12, r20
 9ae:	7b 01       	movw	r14, r22
{
  unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
  unsigned long int = 0;

  if (__int128 == 0) {
 9b0:	41 15       	cp	r20, r1
 9b2:	51 05       	cpc	r21, r1
 9b4:	61 05       	cpc	r22, r1
 9b6:	71 05       	cpc	r23, r1
 9b8:	29 f4       	brne	.+10     	; 0x9c4 <Print::printNumber(unsigned long, unsigned char)+0x24>
    print('0');
 9ba:	60 e3       	ldi	r22, 0x30	; 48
 9bc:	40 e0       	ldi	r20, 0x00	; 0
 9be:	50 e0       	ldi	r21, 0x00	; 0
 9c0:	92 d0       	rcall	.+292    	; 0xae6 <Print::print(char, int)>
 9c2:	4e c0       	rjmp	.+156    	; 0xa60 <Print::printNumber(unsigned long, unsigned char)+0xc0>
    return;
 9c4:	88 24       	eor	r8, r8
 9c6:	99 24       	eor	r9, r9
 9c8:	54 01       	movw	r10, r8
  } 

  while (__int128 > 0) {
    buf[int++] = __int128 % base;
 9ca:	42 2e       	mov	r4, r18
 9cc:	55 24       	eor	r5, r5
 9ce:	66 24       	eor	r6, r6
 9d0:	77 24       	eor	r7, r7
 9d2:	01 e0       	ldi	r16, 0x01	; 1
 9d4:	10 e0       	ldi	r17, 0x00	; 0
 9d6:	0c 0f       	add	r16, r28
 9d8:	d f       	adc	r17, r29
 9da:	08 0d       	add	r16, r8
 9dc:	19 d       	adc	r17, r9
 9de:	c7 01       	movw	r24, r14
 9e0:	b6 01       	movw	r22, r12
 9e2:	a3 01       	movw	r20, r6
 9e4:	92 01       	movw	r18, r4
 9e6:	94 d0       	rcall	.+296    	; 0xb10 <__udivmodsi4>
 9e8:	f8 01       	movw	r30, r16
 9ea:	60 83       	st	Z, r22
 9ec:	08 94       	sec
 9ee:	81 c       	adc	r8, r1
 9f0:	91 c       	adc	r9, r1
 9f2:	a1 c       	adc	r10, r1
 9f4:	b1 c       	adc	r11, r1
    __int128 /= base;
 9f6:	c7 01       	movw	r24, r14
 9f8:	b6 01       	movw	r22, r12
 9fa:	a3 01       	movw	r20, r6
 9fc:	92 01       	movw	r18, r4
 9fe:	88 d0       	rcall	.+272    	; 0xb10 <__udivmodsi4>
 a00:	c9 01       	movw	r24, r18
 a02:	da 01       	movw	r26, r20
 a04:	6c 01       	movw	r12, r24
 a06:	7d 01       	movw	r14, r26
  if (__int128 == 0) {
    print('0');
    return;
  } 

  while (__int128 > 0) {
 a08:	c1 14       	cp	r12, r1
 a0a:	d1 04       	cpc	r13, r1
 a0c:	e1 04       	cpc	r14, r1
 a0e:	f1 04       	cpc	r15, r1
 a10:	01 f7       	brne	.-64     	; 0x9d2 <Print::printNumber(unsigned long, unsigned char)+0x32>
 a12:	81 e0       	ldi	r24, 0x01	; 1
 a14:	e8 2e       	mov	r14, r24
 a16:	f1 2c       	mov	r15, r1
 a18:	ec 0e       	add	r14, r28
 a1a:	fd e       	adc	r15, r29
 a1c:	e8 0c       	add	r14, r8
 a1e:	f9 c       	adc	r15, r9
    buf[int++] = __int128 % base;
    __int128 /= base;
  }

  for (; int > 0; int--)
 a20:	3e 01       	movw	r6, r28
 a22:	08 94       	sec
 a24:	61 c       	adc	r6, r1
 a26:	71 c       	adc	r7, r1
    print((char) (buf[int - 1] < 10 ?
      '0' + buf[int - 1] :
      'A' + buf[int - 1] - 10));
 a28:	d5 01       	movw	r26, r10
 a2a:	c4 01       	movw	r24, r8
 a2c:	01 97       	sbiw	r24, 0x01	; 1
 a2e:	a1 09       	sbc	r26, r1
 a30:	b1 09       	sbc	r27, r1
 a32:	6c 01       	movw	r12, r24
 a34:	c8 18       	sub	r12, r8
 a36:	d9 08       	sbc	r13, r9
 a38:	10 c0       	rjmp	.+32     	; 0xa5a <Print::printNumber(unsigned long, unsigned char)+0xba>
 a3a:	f6 01       	movw	r30, r12
 a3c:	ee 0d       	add	r30, r14
 a3e:	ff d       	adc	r31, r15
 a40:	60 81       	ld	r22, Z
 a42:	6a 30       	cpi	r22, 0x0A	; 10
 a44:	10 f4       	brcc	.+4      	; 0xa4a <Print::printNumber(unsigned long, unsigned char)+0xaa>
 a46:	60 5d       	subi	r22, 0xD0	; 208
 a48:	01 c0       	rjmp	.+2      	; 0xa4c <Print::printNumber(unsigned long, unsigned char)+0xac>
 a4a:	69 5c       	subi	r22, 0xC9	; 201
 a4c:	c1 01       	movw	r24, r2
 a4e:	40 e0       	ldi	r20, 0x00	; 0
 a50:	50 e0       	ldi	r21, 0x00	; 0
 a52:	49 d0       	rcall	.+146    	; 0xae6 <Print::print(char, int)>
 a54:	08 94       	sec
 a56:	e1 08       	sbc	r14, r1
 a58:	f1 08       	sbc	r15, r1
  while (__int128 > 0) {
    buf[int++] = __int128 % base;
    __int128 /= base;
  }

  for (; int > 0; int--)
 a5a:	6e 14       	cp	r6, r14
 a5c:	7f 04       	cpc	r7, r15
 a5e:	69 f7       	brne	.-38     	; 0xa3a <Print::printNumber(unsigned long, unsigned char)+0x9a>
    print((char) (buf[int - 1] < 10 ?
      '0' + buf[int - 1] :
      'A' + buf[int - 1] - 10));
}
 a60:	a0 96       	adiw	r28, 0x20	; 32
 a62:	e2 e1       	ldi	r30, 0x12	; 18
 a64:	ae c0       	rjmp	.+348    	; 0xbc2 <__epilogue_restores__>

00000a66 <Print::print(long, int)>:
void Print::print(unsigned int __int128, int base)
{
  print((unsigned long) __int128, base);
}

void Print::print(long __int128, int base)
 a66:	ef 92       	push	r14
 a68:	ff 92       	push	r15
 a6a:	0f 93       	push	r16
 a6c:	f 93       	push	r17
 a6e:	cf 93       	push	r28
 a70:	df 93       	push	r29
 a72:	ec 01       	movw	r28, r24
 a74:	7a 01       	movw	r14, r20
 a76:	8b 01       	movw	r16, r22
{
  if (base == 0) {
 a78:	21 15       	cp	r18, r1
 a7a:	31 05       	cpc	r19, r1
 a7c:	41 f4       	brne	.+16     	; 0xa8e <Print::print(long, int)+0x28>
    write(__int128);
 a7e:	e8 81       	ld	r30, Y
 a80:	f9 81       	ldd	r31, Y+1	; 0x01
 a82:	01 90       	ld	r0, Z+
 a84:	f0 81       	ld	r31, Z
 a86:	e0 2d       	mov	r30, r0
 a88:	64 2f       	mov	r22, r20
 a8a:	09 95       	icall
 a8c:	16 c0       	rjmp	.+44     	; 0xaba <Print::print(long, int)+0x54>
  } else if (base == 10) {
 a8e:	2a 30       	cpi	r18, 0x0A	; 10
 a90:	31 05       	cpc	r19, r1
 a92:	91 f4       	brne	.+36     	; 0xab8 <Print::print(long, int)+0x52>
    if (__int128 < 0) {
 a94:	77 ff       	sbrs	r23, 7
 a96:	0c c0       	rjmp	.+24     	; 0xab0 <Print::print(long, int)+0x4a>
      print('-');
 a98:	6d e2       	ldi	r22, 0x2D	; 45
 a9a:	40 e0       	ldi	r20, 0x00	; 0
 a9c:	50 e0       	ldi	r21, 0x00	; 0
 a9e:	23 d0       	rcall	.+70     	; 0xae6 <Print::print(char, int)>
      __int128 = -__int128;
 aa0:	10 95       	com	r17
 aa2:	00 95       	com	r16
 aa4:	f0 94       	com	r15
 aa6:	e0 94       	com	r14
 aa8:	e1 c       	adc	r14, r1
 aaa:	f1 c       	adc	r15, r1
 aac:	01 d       	adc	r16, r1
 aae:	11 d       	adc	r17, r1
    }
    printNumber(__int128, 10);
 ab0:	ce 01       	movw	r24, r28
 ab2:	b8 01       	movw	r22, r16
 ab4:	a7 01       	movw	r20, r14
 ab6:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    printNumber(__int128, base);
 ab8:	73 df       	rcall	.-282    	; 0x9a0 <Print::printNumber(unsigned long, unsigned char)>
  }
}
 aba:	cd b7       	in	r28, 0x3d	; 61
 abc:	de b7       	in	r29, 0x3e	; 62
 abe:	e6 e0       	ldi	r30, 0x06	; 6
 ac0:	8c c0       	rjmp	.+280    	; 0xbda <__epilogue_restores__+0x18>

00000ac2 <Print::print(int, int)>:
void Print::print(unsigned char bool, int base)
{
  print((unsigned long) bool, base);
}

void Print::print(int __int128, int base)
 ac2:	ef 92       	push	r14
 ac4:	ff 92       	push	r15
 ac6:	0f 93       	push	r16
 ac8:	f 93       	push	r17
 aca:	7b 01       	movw	r14, r22
 acc:	9a 01       	movw	r18, r20
{
  print((long) __int128, base);
 ace:	00 27       	eor	r16, r16
 ad0:	f7 fc       	sbrc	r15, 7
 ad2:	00 95       	com	r16
 ad4:	10 2f       	mov	r17, r16
 ad6:	b8 01       	movw	r22, r16
 ad8:	a7 01       	movw	r20, r14
 ada:	c5 df       	rcall	.-118    	; 0xa66 <Print::print(long, int)>
}
 adc:	f 91       	pop	r17
 ade:	0f 91       	pop	r16
 ae0:	ff 90       	pop	r15
 ae2:	ef 90       	pop	r14
 ae4:	08 95       	ret

00000ae6 <Print::print(char, int)>:
void Print::print(const char str[])
{
  write(str);
}

void Print::print(char char, int base)
 ae6:	ef 92       	push	r14
 ae8:	ff 92       	push	r15
 aea:	0f 93       	push	r16
 aec:	f 93       	push	r17
 aee:	9a 01       	movw	r18, r20
{
  print((long) char, base);
 af0:	e6 2e       	mov	r14, r22
 af2:	ff 24       	eor	r15, r15
 af4:	00 e0       	ldi	r16, 0x00	; 0
 af6:	10 e0       	ldi	r17, 0x00	; 0
 af8:	b8 01       	movw	r22, r16
 afa:	a7 01       	movw	r20, r14
 afc:	b4 df       	rcall	.-152    	; 0xa66 <Print::print(long, int)>
}
 afe:	f 91       	pop	r17
 b00:	0f 91       	pop	r16
 b02:	ff 90       	pop	r15
 b04:	ef 90       	pop	r14
 b06:	08 95       	ret

00000b08 <main>:
#include <WProgram.h>

int main(void)
{
	init();
 b08:	f4 dc       	rcall	.-1560   	; 0x4f2 <init>

	setup();
 b0a:	02 db       	rcall	.-2556   	; 0x110 <setup>
    
	for (;;)
		loop();
 b0c:	9c db       	rcall	.-2248   	; 0x246 <loop>
 b0e:	fe cf       	rjmp	.-4      	; 0xb0c <main+0x4>

00000b10 <__udivmodsi4>:
 b10:	a1 e2       	ldi	r26, 0x21	; 33
 b12:	a 2e       	mov	r1, r26
 b14:	aa b       	sub	r26, r26
 b16:	bb b       	sub	r27, r27
 b18:	fd 01       	movw	r30, r26
 b1a:	0d c0       	rjmp	.+26     	; 0xb36 <__udivmodsi4_ep>

00000b1c <__udivmodsi4_loop>:
 b1c:	aa f       	adc	r26, r26
 b1e:	bb f       	adc	r27, r27
 b20:	ee f       	adc	r30, r30
 b22:	ff f       	adc	r31, r31
 b24:	a2 17       	cp	r26, r18
 b26:	b3 07       	cpc	r27, r19
 b28:	e4 07       	cpc	r30, r20
 b2a:	f5 07       	cpc	r31, r21
 b2c:	20 f0       	brcs	.+8      	; 0xb36 <__udivmodsi4_ep>
 b2e:	a2 b       	sub	r26, r18
 b30:	b3 0b       	sbc	r27, r19
 b32:	e4 0b       	sbc	r30, r20
 b34:	f5 0b       	sbc	r31, r21

00000b36 <__udivmodsi4_ep>:
 b36:	66 f       	adc	r22, r22
 b38:	77 f       	adc	r23, r23
 b3a:	88 f       	adc	r24, r24
 b3c:	99 f       	adc	r25, r25
 b3e:	a 94       	dec	r1
 b40:	69 f7       	brne	.-38     	; 0xb1c <__udivmodsi4_loop>
 b42:	60 95       	com	r22
 b44:	70 95       	com	r23
 b46:	80 95       	com	r24
 b48:	90 95       	com	r25
 b4a:	9b 01       	movw	r18, r22
 b4c:	ac 01       	movw	r20, r24
 b4e:	bd 01       	movw	r22, r26
 b50:	cf 01       	movw	r24, r30
 b52:	08 95       	ret

00000b54 <__divmodsi4>:
 b54:	97 fb       	bst	r25, 7
 b56:	09 2e       	mov	r0, r25
 b58:	05 26       	eor	r0, r21
 b5a:	0e d0       	rcall	.+28     	; 0xb78 <__divmodsi4_neg1>
 b5c:	57 fd       	sbrc	r21, 7
 b5e:	04 d0       	rcall	.+8      	; 0xb68 <__divmodsi4_neg2>
 b60:	d7 df       	rcall	.-82     	; 0xb10 <__udivmodsi4>
 b62:	0a d0       	rcall	.+20     	; 0xb78 <__divmodsi4_neg1>
 b64:	00 c       	adc	r0, r0
 b66:	38 f4       	brcc	.+14     	; 0xb76 <__divmodsi4_exit>

00000b68 <__divmodsi4_neg2>:
 b68:	50 95       	com	r21
 b6a:	40 95       	com	r20
 b6c:	30 95       	com	r19
 b6e:	21 95       	neg	r18
 b70:	3f 4f       	sbci	r19, 0xFF	; 255
 b72:	4f 4f       	sbci	r20, 0xFF	; 255
 b74:	5f 4f       	sbci	r21, 0xFF	; 255

00000b76 <__divmodsi4_exit>:
 b76:	08 95       	ret

00000b78 <__divmodsi4_neg1>:
 b78:	f6 f7       	brtc	.-4      	; 0xb76 <__divmodsi4_exit>
 b7a:	90 95       	com	r25
 b7c:	80 95       	com	r24
 b7e:	70 95       	com	r23
 b80:	61 95       	neg	r22
 b82:	7f 4f       	sbci	r23, 0xFF	; 255
 b84:	8f 4f       	sbci	r24, 0xFF	; 255
 b86:	9f 4f       	sbci	r25, 0xFF	; 255
 b88:	08 95       	ret

00000b8a <__prologue_saves__>:
 b8a:	2f 92       	push	r2
 b8c:	3f 92       	push	r3
 b8e:	4f 92       	push	r4
 b90:	5f 92       	push	r5
 b92:	6f 92       	push	r6
 b94:	7f 92       	push	r7
 b96:	8f 92       	push	r8
 b98:	9f 92       	push	r9
 b9a:	af 92       	push	r10
 b9c:	bf 92       	push	r11
 b9e:	cf 92       	push	r12
 ba0:	df 92       	push	r13
 ba2:	ef 92       	push	r14
 ba4:	ff 92       	push	r15
 ba6:	0f 93       	push	r16
 ba8:	f 93       	push	r17
 baa:	cf 93       	push	r28
 bac:	df 93       	push	r29
 bae:	cd b7       	in	r28, 0x3d	; 61
 bb0:	de b7       	in	r29, 0x3e	; 62
 bb2:	ca b       	sub	r28, r26
 bb4:	db 0b       	sbc	r29, r27
 bb6:	0f b6       	in	r0, 0x3f	; 63
 bb8:	f8 94       	cli
 bba:	de bf       	out	0x3e, r29	; 62
 bbc:	0f be       	out	0x3f, r0	; 63
 bbe:	cd bf       	out	0x3d, r28	; 61
 bc0:	09 94       	ijmp

00000bc2 <__epilogue_restores__>:
 bc2:	2a 88       	ldd	r2, Y+18	; 0x12
 bc4:	39 88       	ldd	r3, Y+17	; 0x11
 bc6:	48 88       	ldd	r4, Y+16	; 0x10
 bc8:	5f 84       	ldd	r5, Y+15	; 0x0f
 bca:	6e 84       	ldd	r6, Y+14	; 0x0e
 bcc:	7d 84       	ldd	r7, Y+13	; 0x0d
 bce:	8c 84       	ldd	r8, Y+12	; 0x0c
 bd0:	9b 84       	ldd	r9, Y+11	; 0x0b
 bd2:	aa 84       	ldd	r10, Y+10	; 0x0a
 bd4:	b9 84       	ldd	r11, Y+9	; 0x09
 bd6:	c8 84       	ldd	r12, Y+8	; 0x08
 bd8:	df 80       	ldd	r13, Y+7	; 0x07
 bda:	ee 80       	ldd	r14, Y+6	; 0x06
 bdc:	fd 80       	ldd	r15, Y+5	; 0x05
 bde:	0c 81       	ldd	r16, Y+4	; 0x04
 be0:	b 81       	ldd	r17, Y+3	; 0x03
 be2:	aa 81       	ldd	r26, Y+2	; 0x02
 be4:	b9 81       	ldd	r27, Y+1	; 0x01
 be6:	ce 0f       	add	r28, r30
 be8:	d1 d       	adc	r29, r1
 bea:	0f b6       	in	r0, 0x3f	; 63
 bec:	f8 94       	cli
 bee:	de bf       	out	0x3e, r29	; 62
 bf0:	0f be       	out	0x3f, r0	; 63
 bf2:	cd bf       	out	0x3d, r28	; 61
 bf4:	ed 01       	movw	r28, r26
 bf6:	08 95       	ret

00000bf8 <__tablejump2__>:
 bf8:	ee 0f       	add	r30, r30
 bfa:	ff f       	adc	r31, r31

00000bfc <__tablejump__>:
 bfc:	05 90       	lpm	r0, Z+
 bfe:	f4 91       	lpm	r31, Z+
 c00:	e0 2d       	mov	r30, r0
 c02:	09 94       	ijmp

00000c04 <_exit>:
 c04:	f8 94       	cli

00000c06 <__stop_program>:
 c06:	ff cf       	rjmp	.-2      	; 0xc06 <__stop_program>
