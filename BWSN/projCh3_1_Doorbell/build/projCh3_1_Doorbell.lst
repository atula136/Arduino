
build/projCh3_1_Doorbell.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000009e6  00000a7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a0  00800116  00800116  00000a90  2**0
                  ALLOC
  3 .debug_aranges 00000418  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000009f0  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   cc8  00000000  00000000  00001898  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d48  00000000  00000000  00005560  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002732  00000000  00000000  000062a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000720  00000000  00000000  000089dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001060  00000000  00000000  000090fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002a15  00000000  00000000  0000a15c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003a0  00000000  00000000  0000cb71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	timer0_millis = unsigned long;
	timer0_overflow_count++;
}

unsigned long millis()
{
   0:	61 c0       	rjmp	.+194    	; 0xc4 <__ctors_end>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
   2:	00 00       	nop
  for (int int = 0; int < s.length(); int++) {
    write(short[int]);
  }
}

void Print::print(const char str[])
   4:	84 c0       	rjmp	.+264    	; 0x10e <__bad_interrupt>
   6:	00 00       	nop
   8:	82 c0       	rjmp	.+260    	; 0x10e <__bad_interrupt>
   signed char:	00 00       	nop
   char:	80 c0       	rjmp	.+256    	; 0x10e <__bad_interrupt>
   long double:	00 00       	nop
  10:	7e c0       	rjmp	.+252    	; 0x10e <__bad_interrupt>
  12:	00 00       	nop
  14:	7c c0       	rjmp	.+248    	; 0x10e <__bad_interrupt>
  16:	00 00       	nop
  18:	7a c0       	rjmp	.+244    	; 0x10e <__bad_interrupt>
  a:	00 00       	nop
  c:	78 c0       	rjmp	.+240    	; 0x10e <__bad_interrupt>
  e:	00 00       	nop
  20:	76 c0       	rjmp	.+236    	; 0x10e <__bad_interrupt>
  22:	00 00       	nop
  24:	74 c0       	rjmp	.+232    	; 0x10e <__bad_interrupt>
  26:	00 00       	nop
  28:	72 c0       	rjmp	.+228    	; 0x10e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	70 c0       	rjmp	.+224    	; 0x10e <__bad_interrupt>
  2e:	00 00       	nop
  30:	6e c0       	rjmp	.+220    	; 0x10e <__bad_interrupt>
  32:	00 00       	nop
  34:	6c c0       	rjmp	.+216    	; 0x10e <__bad_interrupt>
  36:	00 00       	nop
  38:	6a c0       	rjmp	.+212    	; 0x10e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	68 c0       	rjmp	.+208    	; 0x10e <__bad_interrupt>
  3e:	00 00       	nop
  40:	9b c0       	rjmp	.+310    	; 0x178 <__vector_16>
  42:	00 00       	nop
  44:	64 c0       	rjmp	.+200    	; 0x10e <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c2       	rjmp	.+1070   	; 0x478 <__vector_18>
  4a:	00 00       	nop
  4c:	60 c0       	rjmp	.+192    	; 0x10e <__bad_interrupt>
  4e:	00 00       	nop
  50:	5e c0       	rjmp	.+188    	; 0x10e <__bad_interrupt>
  52:	00 00       	nop
  54:	5c c0       	rjmp	.+184    	; 0x10e <__bad_interrupt>
  56:	00 00       	nop
  58:	5a c0       	rjmp	.+180    	; 0x10e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	58 c0       	rjmp	.+176    	; 0x10e <__bad_interrupt>
  5e:	00 00       	nop
  60:	56 c0       	rjmp	.+172    	; 0x10e <__bad_interrupt>
  62:	00 00       	nop
  64:	54 c0       	rjmp	.+168    	; 0x10e <__bad_interrupt>
	...

00000068 <port_to_mode_PGM>:
  68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
  72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
  7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
  86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
  9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
  ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
  be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
  c2:	66 03       	mulsu	r22, r22

000000c4 <__ctors_end>:
  c4:	11 24       	eor	r1, r1
  c6:	f be       	out	0x3f, r1	; 63
  c8:	cf ef       	ldi	r28, 0xFF	; 255
  ca:	d8 e0       	ldi	r29, 0x08	; 8
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
  d0:	11 e0       	ldi	r17, 0x01	; 1
  d2:	a0 e0       	ldi	r26, 0x00	; 0
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	e6 ee       	ldi	r30, 0xE6	; 230
  d8:	f9 e0       	ldi	r31, 0x09	; 9
  da:	02 c0       	rjmp	.+4      	; 0xe0 <.do_copy_data_start>

000000dc <.do_copy_data_loop>:
  dc:	05 90       	lpm	r0, Z+
  de:	0d 92       	st	X+, r0

000000e0 <.do_copy_data_start>:
  e0:	a6 31       	cpi	r26, 0x16	; 22
  e2:	b1 07       	cpc	r27, r17
  e4:	d9 f7       	brne	.-10     	; 0xdc <.do_copy_data_loop>

000000e6 <__do_clear_bss>:
  e6:	11 e0       	ldi	r17, 0x01	; 1
  e8:	a6 e1       	ldi	r26, 0x16	; 22
  ea:	b1 e0       	ldi	r27, 0x01	; 1
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
  ee:	d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
  f0:	a6 3b       	cpi	r26, 0xB6	; 182
  f2:	b1 07       	cpc	r27, r17
  f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
  f6:	10 e0       	ldi	r17, 0x00	; 0
  f8:	c4 ec       	ldi	r28, 0xC4	; 196
  fa:	d0 e0       	ldi	r29, 0x00	; 0
  fc:	03 c0       	rjmp	.+6      	; 0x104 <.do_global_ctors_start>

000000fe <.do_global_ctors_loop>:
  fe:	22 97       	sbiw	r28, 0x02	; 2
 100:	fe 01       	movw	r30, r28
 102:	6b d4       	rcall	.+2262   	; 0x9da <__tablejump__>

00000104 <.do_global_ctors_start>:
 104:	c2 3c       	cpi	r28, 0xC2	; 194
 106:	d1 07       	cpc	r29, r17
 108:	d1 f7       	brne	.-12     	; 0xfe <.do_global_ctors_loop>
 10a:	ed d3       	rcall	.+2010   	; 0x8e6 <main>
 10c:	6a c4       	rjmp	.+2260   	; 0x9e2 <_exit>

0000010e <__bad_interrupt>:
 10e:	78 cf       	rjmp	.-272    	; 0x0 <__vectors>

00000110 <loop>:
  Serial.begin(9600);
}

void loop() {
  // send signed char capital D over the serial port if the button is pressed
  if (digitalRead(BUTTON) == HIGH) {
 110:	80 91 00 01 	lds	r24, 0x0100
 114:	82 d1       	rcall	.+772    	; 0x41a <digitalRead>
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	d9 f4       	brne	.+54     	; 0x150 <loop+0x40>
    Serial.print('D');
 11a:	83 ea       	ldi	r24, 0xA3	; 163
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	64 e4       	ldi	r22, 0x44	; 68
 120:	40 e0       	ldi	r20, 0x00	; 0
 122:	50 e0       	ldi	r21, 0x00	; 0
 124:	cf d3       	rcall	.+1950   	; 0x8c4 <Print::print(char, int)>
    delay(500); // prevents overwhelming the serial port
 126:	64 ef       	ldi	r22, 0xF4	; 244
 128:	71 e0       	ldi	r23, 0x01	; 1
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	92 d0       	rcall	.+292    	; 0x254 <delay>

    if(Serial.available() > 0){
 130:	83 ea       	ldi	r24, 0xA3	; 163
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	5d d2       	rcall	.+1210   	; 0x5f0 <HardwareSerial::available()>
 136:	18 16       	cp	r1, r24
 138:	19 06       	cpc	r1, r25
 13a:	74 f4       	brge	.+28     	; 0x158 <loop+0x48>
      if(Serial.read() == 'K'){
 13c:	83 ea       	ldi	r24, 0xA3	; 163
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	82 d2       	rcall	.+1284   	; 0x646 <HardwareSerial::read()>
 142:	8b 34       	cpi	r24, 0x4B	; 75
 144:	91 05       	cpc	r25, r1
 146:	41 f4       	brne	.+16     	; 0x158 <loop+0x48>
        digitalWrite(LED, HIGH);
 148:	80 91 02 01 	lds	r24, 0x0102
 14c:	61 e0       	ldi	r22, 0x01	; 1
 14e:	31 c1       	rjmp	.+610    	; 0x3b2 <digitalWrite>
      }
    }
  } else {
    digitalWrite(LED, LOW);
 150:	80 91 02 01 	lds	r24, 0x0102
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	2d c1       	rjmp	.+602    	; 0x3b2 <digitalWrite>
 158:	08 95       	ret

0000015a <setup>:
#define VERSION "1.00a0"
int BUTTON = 2;
int LED = 11;

void setup() {
  pinMode(BUTTON, INPUT);
 15a:	80 91 00 01 	lds	r24, 0x0100
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	d5 d0       	rcall	.+426    	; 0x30c <pinMode>
  pinMode(LED, OUTPUT);
 162:	80 91 02 01 	lds	r24, 0x0102
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	d1 d0       	rcall	.+418    	; 0x30c <pinMode>
  Serial.begin(9600);
 16a:	83 ea       	ldi	r24, 0xA3	; 163
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	40 e8       	ldi	r20, 0x80	; 128
 170:	55 e2       	ldi	r21, 0x25	; 37
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	70 e0       	ldi	r23, 0x00	; 0
}
 176:	e1 c1       	rjmp	.+962    	; 0x53a <HardwareSerial::begin(long)>

00000178 <__vector_16>:
volatile unsigned long timer0_overflow_count = 0;
volatile unsigned long timer0_millis = 0;
static unsigned char timer0_fract = 0;

SIGNAL(TIMER0_OVF_vect)
{
 178:	f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	2f 93       	push	r18
 184:	3f 93       	push	r19
 186:	8f 93       	push	r24
 188:	9f 93       	push	r25
 18a:	af 93       	push	r26
 18c:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long unsigned long = timer0_millis;
 18e:	80 91 a 01 	lds	r24, 0x011A
 192:	90 91 b 01 	lds	r25, 0x011B
 196:	a0 91 c 01 	lds	r26, 0x011C
 19a:	b0 91 d 01 	lds	r27, 0x011D
	unsigned char float = timer0_fract;
 19e:	30 91 e 01 	lds	r19, 0x011E

	unsigned long += MILLIS_INC;
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	a1 d       	adc	r26, r1
 1a6:	b1 d       	adc	r27, r1
	float += FRACT_INC;
 1a8:	23 2f       	mov	r18, r19
 1aa:	2d 5f       	subi	r18, 0xFD	; 253
	if (float >= FRACT_MAX) {
 1ac:	2d 37       	cpi	r18, 0x7D	; 125
 1ae:	20 f0       	brcs	.+8      	; 0x1b8 <__vector_16+0x40>
		float -= FRACT_MAX;
 1b0:	2d 57       	subi	r18, 0x7D	; 125
		unsigned long += 1;
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	a1 d       	adc	r26, r1
 1b6:	b1 d       	adc	r27, r1
	}

	timer0_fract = float;
 1b8:	20 93 e 01 	sts	0x011E, r18
	timer0_millis = unsigned long;
 1bc:	80 93 a 01 	sts	0x011A, r24
 1c0:	90 93 b 01 	sts	0x011B, r25
 1c4:	a0 93 c 01 	sts	0x011C, r26
 1c8:	b0 93 d 01 	sts	0x011D, r27
	timer0_overflow_count++;
 1cc:	80 91 16 01 	lds	r24, 0x0116
 1d0:	90 91 17 01 	lds	r25, 0x0117
 1d4:	a0 91 18 01 	lds	r26, 0x0118
 1d8:	b0 91 19 01 	lds	r27, 0x0119
 1dc:	01 96       	adiw	r24, 0x01	; 1
 1de:	a1 d       	adc	r26, r1
 1e0:	b1 d       	adc	r27, r1
 1e2:	80 93 16 01 	sts	0x0116, r24
 1e6:	90 93 17 01 	sts	0x0117, r25
 1ea:	a0 93 18 01 	sts	0x0118, r26
 1ee:	b0 93 19 01 	sts	0x0119, r27
}
 1f2:	bf 91       	pop	r27
 1f4:	af 91       	pop	r26
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	3f 91       	pop	r19
 1fc:	2f 91       	pop	r18
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	f 90       	pop	r1
 206:	18 95       	reti

00000208 <micros>:
	return unsigned long;
}

unsigned long micros() {
	unsigned long unsigned long;
	uint8_t oldSREG = SREG, unsigned short;
 208:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
 20a:	f8 94       	cli
	unsigned long = timer0_overflow_count;
 20c:	20 91 16 01 	lds	r18, 0x0116
 210:	30 91 17 01 	lds	r19, 0x0117
 214:	40 91 18 01 	lds	r20, 0x0118
 218:	50 91 19 01 	lds	r21, 0x0119
#if defined(TCNT0)
	unsigned short = TCNT0;
 21c:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (unsigned short < 255))
 21e:	a8 9b       	sbis	0x15, 0	; 21
 220:	06 c0       	rjmp	.+12     	; 0x22e <micros+0x26>
 222:	8f 3f       	cpi	r24, 0xFF	; 255
 224:	21 f0       	breq	.+8      	; 0x22e <micros+0x26>
		unsigned long++;
 226:	2f 5f       	subi	r18, 0xFF	; 255
 228:	3f 4f       	sbci	r19, 0xFF	; 255
 22a:	4f 4f       	sbci	r20, 0xFF	; 255
 22c:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (unsigned short < 255))
		unsigned long++;
#endif

	SREG = oldSREG;
 22e:	9f bf       	out	0x3f, r25	; 63
 230:	54 2f       	mov	r21, r20
 232:	43 2f       	mov	r20, r19
 234:	32 2f       	mov	r19, r18
 236:	22 27       	eor	r18, r18
 238:	28 0f       	add	r18, r24
 23a:	31 d       	adc	r19, r1
 23c:	41 d       	adc	r20, r1
 23e:	51 d       	adc	r21, r1
 240:	82 e0       	ldi	r24, 0x02	; 2
 242:	22 0f       	add	r18, r18
 244:	33 f       	adc	r19, r19
 246:	44 f       	adc	r20, r20
 248:	55 f       	adc	r21, r21
 24a:	8a 95       	dec	r24
 24c:	d1 f7       	brne	.-12     	; 0x242 <micros+0x3a>
	
	return ((unsigned long << 8) + unsigned short) * (64 / clockCyclesPerMicrosecond());
}
 24e:	b9 01       	movw	r22, r18
 250:	ca 01       	movw	r24, r20
 252:	08 95       	ret

00000254 <delay>:

void delay(unsigned long ms)
{
 254:	ef 92       	push	r14
 256:	ff 92       	push	r15
 258:	0f 93       	push	r16
 25a:	f 93       	push	r17
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	7b 01       	movw	r14, r22
 262:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
 264:	d1 df       	rcall	.-94     	; 0x208 <micros>
 266:	eb 01       	movw	r28, r22
 268:	0d c0       	rjmp	.+26     	; 0x284 <delay+0x30>

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
 26a:	ce df       	rcall	.-100    	; 0x208 <micros>
 26c:	6c b       	sub	r22, r28
 26e:	7d 0b       	sbc	r23, r29
 270:	68 5e       	subi	r22, 0xE8	; 232
 272:	73 40       	sbci	r23, 0x03	; 3
 274:	d0 f3       	brcs	.-12     	; 0x26a <delay+0x16>
			ms--;
 276:	08 94       	sec
 278:	e1 08       	sbc	r14, r1
 27a:	f1 08       	sbc	r15, r1
 27c:	01 09       	sbc	r16, r1
 27e:	11 09       	sbc	r17, r1
			start += 1000;
 280:	c8 51       	subi	r28, 0x18	; 24
 282:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
 284:	e1 14       	cp	r14, r1
 286:	f1 04       	cpc	r15, r1
 288:	01 05       	cpc	r16, r1
 28a:	11 05       	cpc	r17, r1
 28c:	71 f7       	brne	.-36     	; 0x26a <delay+0x16>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62
 292:	e6 e0       	ldi	r30, 0x06	; 6
 294:	91 c3       	rjmp	.+1826   	; 0x9b8 <__epilogue_restores__+0x18>

00000296 <init>:

void init()
{
	// this needs to be called before setup() or some functions won'unsigned short
	// work there
	sei();
 296:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 298:	84 b5       	in	r24, 0x24	; 36
 29a:	82 60       	ori	r24, 0x02	; 2
 29c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 29e:	84 b5       	in	r24, 0x24	; 36
 a0:	81 60       	ori	r24, 0x01	; 1
 a2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 a4:	85 b5       	in	r24, 0x25	; 37
 a6:	82 60       	ori	r24, 0x02	; 2
 a8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 aa:	85 b5       	in	r24, 0x25	; 37
 ac:	81 60       	ori	r24, 0x01	; 1
 ae:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 b0:	ee e6       	ldi	r30, 0x6E	; 110
 b2:	f0 e0       	ldi	r31, 0x00	; 0
 b4:	80 81       	ld	r24, Z
 b6:	81 60       	ori	r24, 0x01	; 1
 b8:	80 83       	st	Z, r24
	// timers 1 and 2 are used for phase-correct hardware pwm
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve signed char frequency of up
	// 8 MHz (with signed char 16 MHz clock) at 50% duty cycle

	TCCR1B = 0;
 ba:	e1 e8       	ldi	r30, 0x81	; 129
 bc:	f0 e0       	ldi	r31, 0x00	; 0
 be:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	sbi(TCCR1B, CS11);
 c0:	80 81       	ld	r24, Z
 c2:	82 60       	ori	r24, 0x02	; 2
 c4:	80 83       	st	Z, r24
	sbi(TCCR1B, CS10);
 c6:	80 81       	ld	r24, Z
 c8:	81 60       	ori	r24, 0x01	; 1
 ca:	80 83       	st	Z, r24
	sbi(TCCR1, CS11);
	sbi(TCCR1, CS10);
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 cc:	e0 e8       	ldi	r30, 0x80	; 128
 ce:	f0 e0       	ldi	r31, 0x00	; 0
 d0:	80 81       	ld	r24, Z
 d2:	81 60       	ori	r24, 0x01	; 1
 d4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 d6:	e1 eb       	ldi	r30, 0xB1	; 177
 d8:	f0 e0       	ldi	r31, 0x00	; 0
 da:	80 81       	ld	r24, Z
 dc:	84 60       	ori	r24, 0x04	; 4
 de:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 e0:	e0 eb       	ldi	r30, 0xB0	; 176
 e2:	f0 e0       	ldi	r31, 0x00	; 0
 e4:	80 81       	ld	r24, Z
 e6:	81 60       	ori	r24, 0x01	; 1
 e8:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 ea:	ea e7       	ldi	r30, 0x7A	; 122
 ec:	f0 e0       	ldi	r31, 0x00	; 0
 ee:	80 81       	ld	r24, Z
 f0:	84 60       	ori	r24, 0x04	; 4
 f2:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 f4:	80 81       	ld	r24, Z
 f6:	82 60       	ori	r24, 0x02	; 2
 f8:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 fa:	80 81       	ld	r24, Z
 fc:	81 60       	ori	r24, 0x01	; 1
 fe:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 300:	80 81       	ld	r24, Z
 302:	80 68       	ori	r24, 0x80	; 128
 304:	80 83       	st	Z, r24
	// here so they can be used as normal digital int/unsigned __int128; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 306:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
 30a:	08 95       	ret

0000030c <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
 30c:	48 2f       	mov	r20, r24
 30e:	50 e0       	ldi	r21, 0x00	; 0
 310:	ca 01       	movw	r24, r20
 312:	86 56       	subi	r24, 0x66	; 102
 314:	9f 4f       	sbci	r25, 0xFF	; 255
 316:	fc 01       	movw	r30, r24
 318:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
 31a:	4a 57       	subi	r20, 0x7A	; 122
 31c:	5f 4f       	sbci	r21, 0xFF	; 255
 31e:	fa 01       	movw	r30, r20
 320:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
 322:	88 23       	and	r24, r24
 324:	c1 f0       	breq	.+48     	; 0x356 <pinMode+0x4a>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 326:	e8 2f       	mov	r30, r24
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	ee 0f       	add	r30, r30
 32c:	ff f       	adc	r31, r31
 32e:	e8 59       	subi	r30, 0x98	; 152
 330:	ff 4f       	sbci	r31, 0xFF	; 255
 332:	a5 91       	lpm	r26, Z+
 334:	b4 91       	lpm	r27, Z+

	if (mode == INPUT) { 
 336:	66 23       	and	r22, r22
 338:	41 f4       	brne	.+16     	; 0x34a <pinMode+0x3e>
		uint8_t oldSREG = SREG;
 33a:	9f b7       	in	r25, 0x3f	; 63
                cli();
 33c:	f8 94       	cli
		*reg &= ~bit;
 33e:	8c 91       	ld	r24, X
 340:	20 95       	com	r18
 342:	82 23       	and	r24, r18
 344:	8c 93       	st	X, r24
		SREG = oldSREG;
 346:	9f bf       	out	0x3f, r25	; 63
 348:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
 34a:	9f b7       	in	r25, 0x3f	; 63
                cli();
 34c:	f8 94       	cli
		*reg |= bit;
 34e:	8c 91       	ld	r24, X
 350:	82 2b       	or	r24, r18
 352:	8c 93       	st	X, r24
		SREG = oldSREG;
 354:	9f bf       	out	0x3f, r25	; 63
 356:	08 95       	ret

00000358 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 358:	83 30       	cpi	r24, 0x03	; 3
 35a:	71 f0       	breq	.+28     	; 0x378 <turnOffPWM+0x20>
 35c:	84 30       	cpi	r24, 0x04	; 4
 35e:	28 f4       	brcc	.+10     	; 0x36a <turnOffPWM+0x12>
 360:	81 30       	cpi	r24, 0x01	; 1
 362:	a1 f0       	breq	.+40     	; 0x38c <turnOffPWM+0x34>
 364:	82 30       	cpi	r24, 0x02	; 2
 366:	21 f5       	brne	.+72     	; 0x3b0 <turnOffPWM+0x58>
 368:	14 c0       	rjmp	.+40     	; 0x392 <turnOffPWM+0x3a>
 36a:	86 30       	cpi	r24, 0x06	; 6
 36c:	b1 f0       	breq	.+44     	; 0x39a <turnOffPWM+0x42>
 36e:	87 30       	cpi	r24, 0x07	; 7
 370:	d1 f0       	breq	.+52     	; 0x3a6 <turnOffPWM+0x4e>
 372:	84 30       	cpi	r24, 0x04	; 4
 374:	e9 f4       	brne	.+58     	; 0x3b0 <turnOffPWM+0x58>
 376:	04 c0       	rjmp	.+8      	; 0x380 <turnOffPWM+0x28>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 378:	80 91 80 00 	lds	r24, 0x0080
 37c:	8f 77       	andi	r24, 0x7F	; 127
 37e:	03 c0       	rjmp	.+6      	; 0x386 <turnOffPWM+0x2e>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 380:	80 91 80 00 	lds	r24, 0x0080
 384:	8f 7d       	andi	r24, 0xDF	; 223
 386:	80 93 80 00 	sts	0x0080, r24
 38a:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 38c:	84 b5       	in	r24, 0x24	; 36
 38e:	8f 77       	andi	r24, 0x7F	; 127
 390:	02 c0       	rjmp	.+4      	; 0x396 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 392:	84 b5       	in	r24, 0x24	; 36
 394:	8f 7d       	andi	r24, 0xDF	; 223
 396:	84 bd       	out	0x24, r24	; 36
 398:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 39a:	80 91 b0 00 	lds	r24, 0x00B0
 39e:	8f 77       	andi	r24, 0x7F	; 127
 3a0:	80 93 b0 00 	sts	0x00B0, r24
 3a4:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 3a6:	80 91 b0 00 	lds	r24, 0x00B0
 3aa:	8f 7d       	andi	r24, 0xDF	; 223
 3ac:	80 93 b0 00 	sts	0x00B0, r24
 3b0:	08 95       	ret

000003b2 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 3b2:	ff 92       	push	r15
 3b4:	0f 93       	push	r16
 3b6:	f 93       	push	r17
 3b8:	f6 2e       	mov	r15, r22
	uint8_t timer = digitalPinToTimer(pin);
 3ba:	48 2f       	mov	r20, r24
 3bc:	50 e0       	ldi	r21, 0x00	; 0
 3be:	ca 01       	movw	r24, r20
 3c0:	82 55       	subi	r24, 0x52	; 82
 3c2:	9f 4f       	sbci	r25, 0xFF	; 255
 3c4:	fc 01       	movw	r30, r24
 3c6:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
 3c8:	ca 01       	movw	r24, r20
 3ca:	86 56       	subi	r24, 0x66	; 102
 3cc:	9f 4f       	sbci	r25, 0xFF	; 255
 3ce:	fc 01       	movw	r30, r24
 3d0:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
 3d2:	4a 57       	subi	r20, 0x7A	; 122
 3d4:	5f 4f       	sbci	r21, 0xFF	; 255
 3d6:	fa 01       	movw	r30, r20
 3d8:	04 91       	lpm	r16, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 3da:	00 23       	and	r16, r16
 3dc:	d1 f0       	breq	.+52     	; 0x412 <digitalWrite+0x60>

	// If the pin that support PWM output, we need to turn it off
	// before doing signed char digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 3de:	22 23       	and	r18, r18
 3e0:	11 f0       	breq	.+4      	; 0x3e6 <digitalWrite+0x34>
 3e2:	82 2f       	mov	r24, r18
 3e4:	b9 df       	rcall	.-142    	; 0x358 <turnOffPWM>

	out = portOutputRegister(port);
 3e6:	e0 2f       	mov	r30, r16
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	ee 0f       	add	r30, r30
 3ec:	ff f       	adc	r31, r31
 3ee:	ee 58       	subi	r30, 0x8E	; 142
 3f0:	ff 4f       	sbci	r31, 0xFF	; 255
 3f2:	a5 91       	lpm	r26, Z+
 3f4:	b4 91       	lpm	r27, Z+

	if (val == LOW) {
 3f6:	ff 20       	and	r15, r15
 3f8:	31 f4       	brne	.+12     	; 0x406 <digitalWrite+0x54>
		uint8_t oldSREG = SREG;
 3fa:	9f b7       	in	r25, 0x3f	; 63
                cli();
 3fc:	f8 94       	cli
		*out &= ~bit;
 3fe:	8c 91       	ld	r24, X
 400:	10 95       	com	r17
 402:	81 23       	and	r24, r17
 404:	04 c0       	rjmp	.+8      	; 0x40e <digitalWrite+0x5c>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
 406:	9f b7       	in	r25, 0x3f	; 63
                cli();
 408:	f8 94       	cli
		*out |= bit;
 40a:	8c 91       	ld	r24, X
 40c:	81 2b       	or	r24, r17
 40e:	8c 93       	st	X, r24
		SREG = oldSREG;
 410:	9f bf       	out	0x3f, r25	; 63
	}
}
 412:	f 91       	pop	r17
 414:	0f 91       	pop	r16
 416:	ff 90       	pop	r15
 418:	08 95       	ret

0000041a <digitalRead>:

int digitalRead(uint8_t pin)
{
 41a:	0f 93       	push	r16
 41c:	f 93       	push	r17
	uint8_t timer = digitalPinToTimer(pin);
 41e:	48 2f       	mov	r20, r24
 420:	50 e0       	ldi	r21, 0x00	; 0
 422:	ca 01       	movw	r24, r20
 424:	82 55       	subi	r24, 0x52	; 82
 426:	9f 4f       	sbci	r25, 0xFF	; 255
 428:	fc 01       	movw	r30, r24
 42a:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
 42c:	ca 01       	movw	r24, r20
 42e:	86 56       	subi	r24, 0x66	; 102
 430:	9f 4f       	sbci	r25, 0xFF	; 255
 432:	fc 01       	movw	r30, r24
 434:	04 91       	lpm	r16, Z+
	uint8_t port = digitalPinToPort(pin);
 436:	4a 57       	subi	r20, 0x7A	; 122
 438:	5f 4f       	sbci	r21, 0xFF	; 255
 43a:	fa 01       	movw	r30, r20
 43c:	14 91       	lpm	r17, Z+

	if (port == NOT_A_PIN) return LOW;
 43e:	11 23       	and	r17, r17
 440:	19 f4       	brne	.+6      	; 0x448 <digitalRead+0x2e>
 442:	20 e0       	ldi	r18, 0x00	; 0
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	14 c0       	rjmp	.+40     	; 0x470 <digitalRead+0x56>

	// If the pin that support PWM output, we need to turn it off
	// before getting signed char digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 448:	22 23       	and	r18, r18
 44a:	11 f0       	breq	.+4      	; 0x450 <digitalRead+0x36>
 44c:	82 2f       	mov	r24, r18
 44e:	84 df       	rcall	.-248    	; 0x358 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
 450:	81 2f       	mov	r24, r17
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	88 0f       	add	r24, r24
 456:	99 f       	adc	r25, r25
 458:	84 58       	subi	r24, 0x84	; 132
 45a:	9f 4f       	sbci	r25, 0xFF	; 255
 45c:	fc 01       	movw	r30, r24
 45e:	a5 91       	lpm	r26, Z+
 460:	b4 91       	lpm	r27, Z+
 462:	8c 91       	ld	r24, X
 464:	20 e0       	ldi	r18, 0x00	; 0
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	80 23       	and	r24, r16
 46a:	11 f0       	breq	.+4      	; 0x470 <digitalRead+0x56>
 46c:	21 e0       	ldi	r18, 0x01	; 1
 46e:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
 470:	c9 01       	movw	r24, r18
 472:	f 91       	pop	r17
 474:	0f 91       	pop	r16
 476:	08 95       	ret

00000478 <__vector_18>:
    rx_buffer->head = int;
  }
}

#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
 478:	f 92       	push	r1
 47a:	0f 92       	push	r0
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	0f 92       	push	r0
 480:	11 24       	eor	r1, r1
 482:	2f 93       	push	r18
 484:	3f 93       	push	r19
 486:	4f 93       	push	r20
 488:	8f 93       	push	r24
 48a:	9f 93       	push	r25
 48c:	ef 93       	push	r30
 48e:	ff 93       	push	r31
  {
  #if defined(UDR0)
    unsigned char char  =  UDR0;
 490:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer rx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char char, ring_buffer *rx_buffer)
{
  int int = (unsigned int)(rx_buffer->head + 1) % RX_BUFFER_SIZE;
 494:	e0 91 9f 01 	lds	r30, 0x019F
 498:	f0 91 a0 01 	lds	r31, 0x01A0
 49c:	31 96       	adiw	r30, 0x01	; 1
 49e:	9f 01       	movw	r18, r30
 4a0:	2f 77       	andi	r18, 0x7F	; 127
 4a2:	30 70       	andi	r19, 0x00	; 0
 4a4:	31 97       	sbiw	r30, 0x01	; 1

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we'long double restrict about to overflow the buffer
  // and so we don'unsigned short write the character or advance the head.
  if (int != rx_buffer->tail) {
 4a6:	80 91 a1 01 	lds	r24, 0x01A1
 4aa:	90 91 a2 01 	lds	r25, 0x01A2
 4ae:	28 17       	cp	r18, r24
 4b0:	39 07       	cpc	r19, r25
 4b2:	39 f0       	breq	.+14     	; 0x4c2 <__vector_18+0x4a>
    rx_buffer->buffer[rx_buffer->head] = char;
 4b4:	e1 5e       	subi	r30, 0xE1	; 225
 4b6:	fe 4f       	sbci	r31, 0xFE	; 254
 4b8:	40 83       	st	Z, r20
    rx_buffer->head = int;
 4ba:	30 93 a0 01 	sts	0x01A0, r19
 4be:	20 93 9f 01 	sts	0x019F, r18
    unsigned char char  =  UDR;  //  atmega8535
  #else
    #error UDR not defined
  #endif
    store_char(char, &rx_buffer);
  }
 4c2:	ff 91       	pop	r31
 4c4:	ef 91       	pop	r30
 4c6:	9f 91       	pop	r25
 4c8:	8f 91       	pop	r24
 4ca:	4f 91       	pop	r20
 4cc:	3f 91       	pop	r19
 4ce:	2f 91       	pop	r18
 4d0:	0f 90       	pop	r0
 4d2:	0f be       	out	0x3f, r0	; 63
 4d4:	0f 90       	pop	r0
 4d6:	f 90       	pop	r1
 4d8:	18 95       	reti

000004da <HardwareSerial::HardwareSerial(ring_buffer*, unsigned char volatile*, unsigned char volatile*, unsigned char volatile*, unsigned char volatile*, unsigned char volatile*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
 4da:	8f 92       	push	r8
 4dc:	af 92       	push	r10
 4de:	cf 92       	push	r12
 4e0:	df 92       	push	r13
 4e2:	ef 92       	push	r14
 4e4:	ff 92       	push	r15
 4e6:	0f 93       	push	r16
 4e8:	f 93       	push	r17
 4ea:	df 93       	push	r29
 4ec:	cf 93       	push	r28
 4ee:	cd b7       	in	r28, 0x3d	; 61
 4f0:	de b7       	in	r29, 0x3e	; 62
 4f2:	fc 01       	movw	r30, r24
 4f4:	88 e0       	ldi	r24, 0x08	; 8
 4f6:	91 e0       	ldi	r25, 0x01	; 1
 4f8:	91 83       	std	Z+1, r25	; 0x01
 4fa:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
 4fc:	73 83       	std	Z+3, r23	; 0x03
 4fe:	62 83       	std	Z+2, r22	; 0x02
  _ubrrh = ubrrh;
 500:	55 83       	std	Z+5, r21	; 0x05
 502:	44 83       	std	Z+4, r20	; 0x04
  _ubrrl = ubrrl;
 504:	37 83       	std	Z+7, r19	; 0x07
 506:	26 83       	std	Z+6, r18	; 0x06
  _ucsra = ucsra;
 508:	11 87       	std	Z+9, r17	; 0x09
 50a:	00 87       	std	Z+8, r16	; 0x08
  _ucsrb = ucsrb;
 50c:	f3 86       	std	Z+11, r15	; 0x0b
 50e:	e2 86       	std	Z+10, r14	; 0x0a
  _udr = udr;
 510:	d5 86       	std	Z+13, r13	; 0x0d
 512:	c4 86       	std	Z+12, r12	; 0x0c
  _rxen = rxen;
 514:	a6 86       	std	Z+14, r10	; 0x0e
  _txen = txen;
 516:	87 86       	std	Z+15, r8	; 0x0f
  _rxcie = rxcie;
 518:	8d 85       	ldd	r24, Y+13	; 0x0d
 51a:	80 8b       	std	Z+16, r24	; 0x10
  _udre = udre;
 51c:	8e 85       	ldd	r24, Y+14	; 0x0e
 51e:	81 8b       	std	Z+17, r24	; 0x11
  _u2x = u2x;
 520:	8f 85       	ldd	r24, Y+15	; 0x0f
 522:	82 8b       	std	Z+18, r24	; 0x12
}
 524:	cf 91       	pop	r28
 526:	df 91       	pop	r29
 528:	f 91       	pop	r17
 52a:	0f 91       	pop	r16
 52c:	ff 90       	pop	r15
 52e:	ef 90       	pop	r14
 530:	df 90       	pop	r13
 532:	cf 90       	pop	r12
 534:	af 90       	pop	r10
 536:	8f 90       	pop	r8
 538:	08 95       	ret

0000053a <HardwareSerial::begin(long)>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(long baud)
 53a:	cf 93       	push	r28
 53c:	df 93       	push	r29
 53e:	ec 01       	movw	r28, r24
 540:	9a 01       	movw	r18, r20
 542:	ab 01       	movw	r20, r22
 544:	e8 85       	ldd	r30, Y+8	; 0x08
 546:	f9 85       	ldd	r31, Y+9	; 0x09

#if F_CPU == 16000000UL
  // hardcoded exception for compatibility with the bootloader shipped
  // with the Duemilanove and previous boards and the firmware on the 8U2
  // on the Uno and Mega 2560.
  if (baud == 57600) {
 548:	20 30       	cpi	r18, 0x00	; 0
 54a:	81 ee       	ldi	r24, 0xE1	; 225
 54c:	38 07       	cpc	r19, r24
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	48 07       	cpc	r20, r24
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	58 07       	cpc	r21, r24
 556:	09 f4       	brne	.+2      	; 0x55a <HardwareSerial::begin(long)+0x20>
 558:	47 c0       	rjmp	.+142    	; 0x5e8 <HardwareSerial::begin(long)+0xae>
    use_u2x = false;
  }
#endif
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	0a 88       	ldd	r0, Y+18	; 0x12
 560:	02 c0       	rjmp	.+4      	; 0x566 <HardwareSerial::begin(long)+0x2c>
 562:	88 0f       	add	r24, r24
 564:	99 f       	adc	r25, r25
 566:	0a 94       	dec	r0
 568:	e2 f7       	brpl	.-8      	; 0x562 <HardwareSerial::begin(long)+0x28>
 56a:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
 56c:	60 e0       	ldi	r22, 0x00	; 0
 56e:	79 e0       	ldi	r23, 0x09	; 9
 570:	8d e3       	ldi	r24, 0x3D	; 61
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	de d1       	rcall	.+956    	; 0x932 <__divmodsi4>
 576:	21 50       	subi	r18, 0x01	; 1
 578:	30 40       	sbci	r19, 0x00	; 0
 57a:	40 40       	sbci	r20, 0x00	; 0
 57c:	50 40       	sbci	r21, 0x00	; 0
 57e:	ca 01       	movw	r24, r20
 580:	b9 01       	movw	r22, r18
 582:	22 e0       	ldi	r18, 0x02	; 2
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	40 e0       	ldi	r20, 0x00	; 0
 588:	50 e0       	ldi	r21, 0x00	; 0
 58a:	d3 d1       	rcall	.+934    	; 0x932 <__divmodsi4>
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 58c:	ec 81       	ldd	r30, Y+4	; 0x04
 58e:	fd 81       	ldd	r31, Y+5	; 0x05
 590:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 592:	ee 81       	ldd	r30, Y+6	; 0x06
 594:	ff 81       	ldd	r31, Y+7	; 0x07
 596:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
 598:	ea 85       	ldd	r30, Y+10	; 0x0a
 59a:	fb 85       	ldd	r31, Y+11	; 0x0b
 59c:	20 81       	ld	r18, Z
 59e:	41 e0       	ldi	r20, 0x01	; 1
 5a0:	50 e0       	ldi	r21, 0x00	; 0
 5a2:	ca 01       	movw	r24, r20
 5a4:	0e 84       	ldd	r0, Y+14	; 0x0e
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <HardwareSerial::begin(long)+0x72>
 5a8:	88 0f       	add	r24, r24
 5aa:	99 f       	adc	r25, r25
 5ac:	0a 94       	dec	r0
 5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <HardwareSerial::begin(long)+0x6e>
 5b0:	28 2b       	or	r18, r24
 5b2:	20 83       	st	Z, r18
  sbi(*_ucsrb, _txen);
 5b4:	ea 85       	ldd	r30, Y+10	; 0x0a
 5b6:	fb 85       	ldd	r31, Y+11	; 0x0b
 5b8:	20 81       	ld	r18, Z
 5ba:	ca 01       	movw	r24, r20
 5bc:	0f 84       	ldd	r0, Y+15	; 0x0f
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <HardwareSerial::begin(long)+0x8a>
 5c0:	88 0f       	add	r24, r24
 5c2:	99 f       	adc	r25, r25
 5c4:	0a 94       	dec	r0
 5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <HardwareSerial::begin(long)+0x86>
 5c8:	28 2b       	or	r18, r24
 5ca:	20 83       	st	Z, r18
  sbi(*_ucsrb, _rxcie);
 5cc:	ea 85       	ldd	r30, Y+10	; 0x0a
 5ce:	fb 85       	ldd	r31, Y+11	; 0x0b
 5d0:	80 81       	ld	r24, Z
 5d2:	08 88       	ldd	r0, Y+16	; 0x10
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <HardwareSerial::begin(long)+0xa0>
 5d6:	44 0f       	add	r20, r20
 5d8:	55 f       	adc	r21, r21
 5da:	0a 94       	dec	r0
 5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <HardwareSerial::begin(long)+0x9c>
 5de:	84 2b       	or	r24, r20
 5e0:	80 83       	st	Z, r24
}
 5e2:	df 91       	pop	r29
 5e4:	cf 91       	pop	r28
 5e6:	08 95       	ret
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
 5e8:	10 82       	st	Z, r1
 5ea:	20 e1       	ldi	r18, 0x10	; 16
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	ce cf       	rjmp	.-100    	; 0x58c <HardwareSerial::begin(long)+0x52>

000005f0 <HardwareSerial::available()>:
  cbi(*_ucsrb, _rxcie);  
}

int HardwareSerial::available(void)
{
  return (unsigned int)(RX_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % RX_BUFFER_SIZE;
 5f0:	dc 01       	movw	r26, r24
 5f2:	12 96       	adiw	r26, 0x02	; 2
 5f4:	ed 91       	ld	r30, X+
 5f6:	fc 91       	ld	r31, X
 5f8:	13 97       	sbiw	r26, 0x03	; 3
 5fa:	e0 58       	subi	r30, 0x80	; 128
 5fc:	ff 4f       	sbci	r31, 0xFF	; 255
 5fe:	21 91       	ld	r18, Z+
 600:	31 91       	ld	r19, Z+
 602:	80 81       	ld	r24, Z
 604:	91 81       	ldd	r25, Z+1	; 0x01
 606:	28 b       	sub	r18, r24
 608:	39 0b       	sbc	r19, r25
 60a:	2f 77       	andi	r18, 0x7F	; 127
 60c:	30 70       	andi	r19, 0x00	; 0
}
 60e:	c9 01       	movw	r24, r18
 610:	08 95       	ret

00000612 <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
 612:	dc 01       	movw	r26, r24
 614:	12 96       	adiw	r26, 0x02	; 2
 616:	ed 91       	ld	r30, X+
 618:	fc 91       	ld	r31, X
 61a:	13 97       	sbiw	r26, 0x03	; 3
 61c:	ee 57       	subi	r30, 0x7E	; 126
 61e:	ff 4f       	sbci	r31, 0xFF	; 255
 620:	20 81       	ld	r18, Z
 622:	31 81       	ldd	r19, Z+1	; 0x01
 624:	92 91       	ld	r25, -Z
 626:	82 91       	ld	r24, -Z
 628:	e0 58       	subi	r30, 0x80	; 128
 62a:	f0 40       	sbci	r31, 0x00	; 0
 62c:	82 17       	cp	r24, r18
 62e:	93 07       	cpc	r25, r19
 630:	19 f4       	brne	.+6      	; 0x638 <HardwareSerial::peek()+0x26>
 632:	2f ef       	ldi	r18, 0xFF	; 255
 634:	3f ef       	ldi	r19, 0xFF	; 255
 636:	05 c0       	rjmp	.+10     	; 0x642 <HardwareSerial::peek()+0x30>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
 638:	e2 0f       	add	r30, r18
 63a:	f3 f       	adc	r31, r19
 63c:	80 81       	ld	r24, Z
 63e:	28 2f       	mov	r18, r24
 640:	30 e0       	ldi	r19, 0x00	; 0
  }
}
 642:	c9 01       	movw	r24, r18
 644:	08 95       	ret

00000646 <HardwareSerial::read()>:

int HardwareSerial::read(void)
{
  // if the head isn'unsigned short ahead of the tail, we don'unsigned short have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
 646:	dc 01       	movw	r26, r24
 648:	12 96       	adiw	r26, 0x02	; 2
 64a:	ed 91       	ld	r30, X+
 64c:	fc 91       	ld	r31, X
 64e:	13 97       	sbiw	r26, 0x03	; 3
 650:	df 01       	movw	r26, r30
 652:	ae 57       	subi	r26, 0x7E	; 126
 654:	bf 4f       	sbci	r27, 0xFF	; 255
 656:	2d 91       	ld	r18, X+
 658:	3c 91       	ld	r19, X
 65a:	11 97       	sbiw	r26, 0x01	; 1
 65c:	e0 58       	subi	r30, 0x80	; 128
 65e:	ff 4f       	sbci	r31, 0xFF	; 255
 660:	80 81       	ld	r24, Z
 662:	91 81       	ldd	r25, Z+1	; 0x01
 664:	e0 58       	subi	r30, 0x80	; 128
 666:	f0 40       	sbci	r31, 0x00	; 0
 668:	82 17       	cp	r24, r18
 66a:	93 07       	cpc	r25, r19
 66c:	19 f4       	brne	.+6      	; 0x674 <HardwareSerial::read()+0x2e>
 66e:	2f ef       	ldi	r18, 0xFF	; 255
 670:	3f ef       	ldi	r19, 0xFF	; 255
 672:	0b c0       	rjmp	.+22     	; 0x68a <HardwareSerial::read()+0x44>
    return -1;
  } else {
    unsigned char char = _rx_buffer->buffer[_rx_buffer->tail];
 674:	e2 0f       	add	r30, r18
 676:	f3 f       	adc	r31, r19
 678:	80 81       	ld	r24, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % RX_BUFFER_SIZE;
 67a:	2f 5f       	subi	r18, 0xFF	; 255
 67c:	3f 4f       	sbci	r19, 0xFF	; 255
 67e:	2f 77       	andi	r18, 0x7F	; 127
 680:	30 70       	andi	r19, 0x00	; 0
 682:	2d 93       	st	X+, r18
 684:	3c 93       	st	X, r19
    return char;
 686:	28 2f       	mov	r18, r24
 688:	30 e0       	ldi	r19, 0x00	; 0
  }
}
 68a:	c9 01       	movw	r24, r18
 68c:	08 95       	ret

0000068e <HardwareSerial::flush()>:
  // don'unsigned short reverse this or there may be problems if the RX interrupt
  // occurs after reading the value of rx_buffer_head but before writing
  // the value to rx_buffer_tail; the previous value of rx_buffer_head
  // may be written to rx_buffer_tail, making it appear as if the buffer
  // were full, not empty.
  _rx_buffer->head = _rx_buffer->tail;
 68e:	dc 01       	movw	r26, r24
 690:	12 96       	adiw	r26, 0x02	; 2
 692:	ed 91       	ld	r30, X+
 694:	fc 91       	ld	r31, X
 696:	13 97       	sbiw	r26, 0x03	; 3
 698:	ee 57       	subi	r30, 0x7E	; 126
 69a:	ff 4f       	sbci	r31, 0xFF	; 255
 69c:	80 81       	ld	r24, Z
 69e:	91 81       	ldd	r25, Z+1	; 0x01
 6a0:	92 93       	st	-Z, r25
 6a2:	82 93       	st	-Z, r24
}
 6a4:	08 95       	ret

000006a6 <HardwareSerial::write(unsigned char)>:

void HardwareSerial::write(uint8_t char)
 6a6:	fc 01       	movw	r30, r24
{
  while (!((*_ucsra) & (1 << _udre)))
 6a8:	a0 85       	ldd	r26, Z+8	; 0x08
 6aa:	b1 85       	ldd	r27, Z+9	; 0x09
 6ac:	21 89       	ldd	r18, Z+17	; 0x11
 6ae:	8c 91       	ld	r24, X
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	02 2e       	mov	r0, r18
 6b4:	02 c0       	rjmp	.+4      	; 0x6ba <HardwareSerial::write(unsigned char)+0x14>
 6b6:	95 95       	asr	r25
 6b8:	87 95       	ror	r24
 6ba:	0a 94       	dec	r0
 6bc:	e2 f7       	brpl	.-8      	; 0x6b6 <HardwareSerial::write(unsigned char)+0x10>
 6be:	80 ff       	sbrs	r24, 0
 6c0:	f6 cf       	rjmp	.-20     	; 0x6ae <HardwareSerial::write(unsigned char)+0x8>
    ;

  *_udr = char;
 6c2:	04 84       	ldd	r0, Z+12	; 0x0c
 6c4:	f5 85       	ldd	r31, Z+13	; 0x0d
 6c6:	e0 2d       	mov	r30, r0
 6c8:	60 83       	st	Z, r22
}
 6ca:	08 95       	ret

000006cc <global constructors keyed to rx_buffer>:
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRE0, U2X0);
 6cc:	8f 92       	push	r8
 6ce:	af 92       	push	r10
 6d0:	cf 92       	push	r12
 6d2:	df 92       	push	r13
 6d4:	ef 92       	push	r14
 6d6:	ff 92       	push	r15
 6d8:	0f 93       	push	r16
 6da:	f 93       	push	r17
 6dc:	00 d0       	rcall	.+0      	; 0x6de <global constructors keyed to rx_buffer+0x12>
 6de:	0f 92       	push	r0
 6e0:	ed b7       	in	r30, 0x3d	; 61
 6e2:	fe b7       	in	r31, 0x3e	; 62
 6e4:	31 96       	adiw	r30, 0x01	; 1
 6e6:	87 e0       	ldi	r24, 0x07	; 7
 6e8:	ad b7       	in	r26, 0x3d	; 61
 6ea:	be b7       	in	r27, 0x3e	; 62
 6ec:	11 96       	adiw	r26, 0x01	; 1
 6ee:	8c 93       	st	X, r24
 6f0:	85 e0       	ldi	r24, 0x05	; 5
 6f2:	81 83       	std	Z+1, r24	; 0x01
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	82 83       	std	Z+2, r24	; 0x02
 6f8:	83 ea       	ldi	r24, 0xA3	; 163
 6fa:	91 e0       	ldi	r25, 0x01	; 1
 6fc:	6f e1       	ldi	r22, 0x1F	; 31
 6fe:	71 e0       	ldi	r23, 0x01	; 1
 700:	45 ec       	ldi	r20, 0xC5	; 197
 702:	50 e0       	ldi	r21, 0x00	; 0
 704:	24 ec       	ldi	r18, 0xC4	; 196
 706:	30 e0       	ldi	r19, 0x00	; 0
 708:	00 ec       	ldi	r16, 0xC0	; 192
 70a:	10 e0       	ldi	r17, 0x00	; 0
 70c:	b1 ec       	ldi	r27, 0xC1	; 193
 70e:	eb 2e       	mov	r14, r27
 710:	f1 2c       	mov	r15, r1
 712:	a6 ec       	ldi	r26, 0xC6	; 198
 714:	ca 2e       	mov	r12, r26
 716:	d1 2c       	mov	r13, r1
 718:	f4 e0       	ldi	r31, 0x04	; 4
 71a:	af 2e       	mov	r10, r31
 71c:	e3 e0       	ldi	r30, 0x03	; 3
 71e:	8e 2e       	mov	r8, r30
 720:	dc de       	rcall	.-584    	; 0x4da <HardwareSerial::HardwareSerial(ring_buffer*, unsigned char volatile*, unsigned char volatile*, unsigned char volatile*, unsigned char volatile*, unsigned char volatile*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
 722:	0f 90       	pop	r0
 724:	0f 90       	pop	r0
 726:	0f 90       	pop	r0
 728:	f 91       	pop	r17
 72a:	0f 91       	pop	r16
 72c:	ff 90       	pop	r15
 72e:	ef 90       	pop	r14
 730:	df 90       	pop	r13
 732:	cf 90       	pop	r12
 734:	af 90       	pop	r10
 736:	8f 90       	pop	r8
 738:	08 95       	ret

0000073a <Print::write(char const*)>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
 73a:	0f 93       	push	r16
 73c:	f 93       	push	r17
 73e:	cf 93       	push	r28
 740:	df 93       	push	r29
 742:	8c 01       	movw	r16, r24
 744:	eb 01       	movw	r28, r22
 746:	09 c0       	rjmp	.+18     	; 0x75a <Print::write(char const*)+0x20>
{
  while (*str)
    write(*str++);
 748:	21 96       	adiw	r28, 0x01	; 1
 74a:	d8 01       	movw	r26, r16
 74c:	ed 91       	ld	r30, X+
 74e:	fc 91       	ld	r31, X
 750:	01 90       	ld	r0, Z+
 752:	f0 81       	ld	r31, Z
 754:	e0 2d       	mov	r30, r0
 756:	c8 01       	movw	r24, r16
 758:	09 95       	icall
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
{
  while (*str)
 75a:	68 81       	ld	r22, Y
 75c:	66 23       	and	r22, r22
 75e:	a1 f7       	brne	.-24     	; 0x748 <Print::write(char const*)+0xe>
    write(*str++);
}
 760:	df 91       	pop	r29
 762:	cf 91       	pop	r28
 764:	f 91       	pop	r17
 766:	0f 91       	pop	r16
 768:	08 95       	ret

0000076a <Print::write(unsigned char const*, unsigned int)>:

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
 76a:	ef 92       	push	r14
 76c:	ff 92       	push	r15
 76e:	0f 93       	push	r16
 770:	f 93       	push	r17
 772:	cf 93       	push	r28
 774:	df 93       	push	r29
 776:	8c 01       	movw	r16, r24
 778:	7b 01       	movw	r14, r22
 77a:	ea 01       	movw	r28, r20
 77c:	0c c0       	rjmp	.+24     	; 0x796 <Print::write(unsigned char const*, unsigned int)+0x2c>
{
  while (size--)
    write(*buffer++);
 77e:	d7 01       	movw	r26, r14
 780:	6d 91       	ld	r22, X+
 782:	7d 01       	movw	r14, r26
 784:	d8 01       	movw	r26, r16
 786:	ed 91       	ld	r30, X+
 788:	fc 91       	ld	r31, X
 78a:	01 90       	ld	r0, Z+
 78c:	f0 81       	ld	r31, Z
 78e:	e0 2d       	mov	r30, r0
 790:	c8 01       	movw	r24, r16
 792:	09 95       	icall
 794:	21 97       	sbiw	r28, 0x01	; 1
}

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
{
  while (size--)
 796:	20 97       	sbiw	r28, 0x00	; 0
 798:	91 f7       	brne	.-28     	; 0x77e <Print::write(unsigned char const*, unsigned int)+0x14>
    write(*buffer++);
}
 79a:	cd b7       	in	r28, 0x3d	; 61
 79c:	de b7       	in	r29, 0x3e	; 62
 79e:	e6 e0       	ldi	r30, 0x06	; 6
 7a0:	0b c1       	rjmp	.+534    	; 0x9b8 <__epilogue_restores__+0x18>

000007a2 <Print::printNumber(unsigned long, unsigned char)>:
  println();
}

// Private Methods /////////////////////////////////////////////////////////////

void Print::printNumber(unsigned long __int128, uint8_t base)
 7a2:	a0 e2       	ldi	r26, 0x20	; 32
 7a4:	b0 e0       	ldi	r27, 0x00	; 0
 7a6:	e6 ed       	ldi	r30, 0xD6	; 214
 7a8:	f3 e0       	ldi	r31, 0x03	; 3
 7aa:	de c0       	rjmp	.+444    	; 0x968 <__prologue_saves__>
 7ac:	c 01       	movw	r2, r24
 7ae:	6a 01       	movw	r12, r20
 7b0:	7b 01       	movw	r14, r22
{
  unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
  unsigned long int = 0;

  if (__int128 == 0) {
 7b2:	41 15       	cp	r20, r1
 7b4:	51 05       	cpc	r21, r1
 7b6:	61 05       	cpc	r22, r1
 7b8:	71 05       	cpc	r23, r1
 7ba:	29 f4       	brne	.+10     	; 0x7c6 <Print::printNumber(unsigned long, unsigned char)+0x24>
    print('0');
 7bc:	60 e3       	ldi	r22, 0x30	; 48
 7be:	40 e0       	ldi	r20, 0x00	; 0
 7c0:	50 e0       	ldi	r21, 0x00	; 0
 7c2:	80 d0       	rcall	.+256    	; 0x8c4 <Print::print(char, int)>
 7c4:	4e c0       	rjmp	.+156    	; 0x862 <Print::printNumber(unsigned long, unsigned char)+0xc0>
    return;
 7c6:	88 24       	eor	r8, r8
 7c8:	99 24       	eor	r9, r9
 7ca:	54 01       	movw	r10, r8
  } 

  while (__int128 > 0) {
    buf[int++] = __int128 % base;
 7cc:	42 2e       	mov	r4, r18
 7ce:	55 24       	eor	r5, r5
 7d0:	66 24       	eor	r6, r6
 7d2:	77 24       	eor	r7, r7
 7d4:	01 e0       	ldi	r16, 0x01	; 1
 7d6:	10 e0       	ldi	r17, 0x00	; 0
 7d8:	0c 0f       	add	r16, r28
 7da:	d f       	adc	r17, r29
 7dc:	08 0d       	add	r16, r8
 7de:	19 d       	adc	r17, r9
 7e0:	c7 01       	movw	r24, r14
 7e2:	b6 01       	movw	r22, r12
 7e4:	a3 01       	movw	r20, r6
 7e6:	92 01       	movw	r18, r4
 7e8:	82 d0       	rcall	.+260    	; 0x8ee <__udivmodsi4>
 7ea:	f8 01       	movw	r30, r16
 7ec:	60 83       	st	Z, r22
 7ee:	08 94       	sec
 7f0:	81 c       	adc	r8, r1
 7f2:	91 c       	adc	r9, r1
 7f4:	a1 c       	adc	r10, r1
 7f6:	b1 c       	adc	r11, r1
    __int128 /= base;
 7f8:	c7 01       	movw	r24, r14
 7fa:	b6 01       	movw	r22, r12
 7fc:	a3 01       	movw	r20, r6
 7fe:	92 01       	movw	r18, r4
 800:	76 d0       	rcall	.+236    	; 0x8ee <__udivmodsi4>
 802:	c9 01       	movw	r24, r18
 804:	da 01       	movw	r26, r20
 806:	6c 01       	movw	r12, r24
 808:	7d 01       	movw	r14, r26
  if (__int128 == 0) {
    print('0');
    return;
  } 

  while (__int128 > 0) {
 80a:	c1 14       	cp	r12, r1
 80c:	d1 04       	cpc	r13, r1
 80e:	e1 04       	cpc	r14, r1
 810:	f1 04       	cpc	r15, r1
 812:	01 f7       	brne	.-64     	; 0x7d4 <Print::printNumber(unsigned long, unsigned char)+0x32>
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	e8 2e       	mov	r14, r24
 818:	f1 2c       	mov	r15, r1
 81a:	ec 0e       	add	r14, r28
 81c:	fd e       	adc	r15, r29
 81e:	e8 0c       	add	r14, r8
 820:	f9 c       	adc	r15, r9
    buf[int++] = __int128 % base;
    __int128 /= base;
  }

  for (; int > 0; int--)
 822:	3e 01       	movw	r6, r28
 824:	08 94       	sec
 826:	61 c       	adc	r6, r1
 828:	71 c       	adc	r7, r1
    print((char) (buf[int - 1] < 10 ?
      '0' + buf[int - 1] :
      'A' + buf[int - 1] - 10));
 82a:	d5 01       	movw	r26, r10
 82c:	c4 01       	movw	r24, r8
 82e:	01 97       	sbiw	r24, 0x01	; 1
 830:	a1 09       	sbc	r26, r1
 832:	b1 09       	sbc	r27, r1
 834:	6c 01       	movw	r12, r24
 836:	c8 18       	sub	r12, r8
 838:	d9 08       	sbc	r13, r9
 83a:	10 c0       	rjmp	.+32     	; 0x85c <Print::printNumber(unsigned long, unsigned char)+0xba>
 83c:	f6 01       	movw	r30, r12
 83e:	ee 0d       	add	r30, r14
 840:	ff d       	adc	r31, r15
 842:	60 81       	ld	r22, Z
 844:	6a 30       	cpi	r22, 0x0A	; 10
 846:	10 f4       	brcc	.+4      	; 0x84c <Print::printNumber(unsigned long, unsigned char)+0xaa>
 848:	60 5d       	subi	r22, 0xD0	; 208
 84a:	01 c0       	rjmp	.+2      	; 0x84e <Print::printNumber(unsigned long, unsigned char)+0xac>
 84c:	69 5c       	subi	r22, 0xC9	; 201
 84e:	c1 01       	movw	r24, r2
 850:	40 e0       	ldi	r20, 0x00	; 0
 852:	50 e0       	ldi	r21, 0x00	; 0
 854:	37 d0       	rcall	.+110    	; 0x8c4 <Print::print(char, int)>
 856:	08 94       	sec
 858:	e1 08       	sbc	r14, r1
 85a:	f1 08       	sbc	r15, r1
  while (__int128 > 0) {
    buf[int++] = __int128 % base;
    __int128 /= base;
  }

  for (; int > 0; int--)
 85c:	6e 14       	cp	r6, r14
 85e:	7f 04       	cpc	r7, r15
 860:	69 f7       	brne	.-38     	; 0x83c <Print::printNumber(unsigned long, unsigned char)+0x9a>
    print((char) (buf[int - 1] < 10 ?
      '0' + buf[int - 1] :
      'A' + buf[int - 1] - 10));
}
 862:	a0 96       	adiw	r28, 0x20	; 32
 864:	e2 e1       	ldi	r30, 0x12	; 18
 866:	9c c0       	rjmp	.+312    	; 0x9a0 <__epilogue_restores__>

00000868 <Print::print(long, int)>:
void Print::print(unsigned int __int128, int base)
{
  print((unsigned long) __int128, base);
}

void Print::print(long __int128, int base)
 868:	ef 92       	push	r14
 86a:	ff 92       	push	r15
 86c:	0f 93       	push	r16
 86e:	f 93       	push	r17
 870:	cf 93       	push	r28
 872:	df 93       	push	r29
 874:	ec 01       	movw	r28, r24
 876:	7a 01       	movw	r14, r20
 878:	8b 01       	movw	r16, r22
{
  if (base == 0) {
 87a:	21 15       	cp	r18, r1
 87c:	31 05       	cpc	r19, r1
 87e:	41 f4       	brne	.+16     	; 0x890 <Print::print(long, int)+0x28>
    write(__int128);
 880:	e8 81       	ld	r30, Y
 882:	f9 81       	ldd	r31, Y+1	; 0x01
 884:	01 90       	ld	r0, Z+
 886:	f0 81       	ld	r31, Z
 888:	e0 2d       	mov	r30, r0
 88a:	64 2f       	mov	r22, r20
 88c:	09 95       	icall
 88e:	16 c0       	rjmp	.+44     	; 0x8bc <Print::print(long, int)+0x54>
  } else if (base == 10) {
 890:	2a 30       	cpi	r18, 0x0A	; 10
 892:	31 05       	cpc	r19, r1
 894:	91 f4       	brne	.+36     	; 0x8ba <Print::print(long, int)+0x52>
    if (__int128 < 0) {
 896:	77 ff       	sbrs	r23, 7
 898:	0c c0       	rjmp	.+24     	; 0x8b2 <Print::print(long, int)+0x4a>
      print('-');
 89a:	6d e2       	ldi	r22, 0x2D	; 45
 89c:	40 e0       	ldi	r20, 0x00	; 0
 89e:	50 e0       	ldi	r21, 0x00	; 0
 8a0:	11 d0       	rcall	.+34     	; 0x8c4 <Print::print(char, int)>
      __int128 = -__int128;
 8a2:	10 95       	com	r17
 8a4:	00 95       	com	r16
 8a6:	f0 94       	com	r15
 8a8:	e0 94       	com	r14
 8aa:	e1 c       	adc	r14, r1
 8ac:	f1 c       	adc	r15, r1
 8ae:	01 d       	adc	r16, r1
 8b0:	11 d       	adc	r17, r1
    }
    printNumber(__int128, 10);
 8b2:	ce 01       	movw	r24, r28
 8b4:	b8 01       	movw	r22, r16
 8b6:	a7 01       	movw	r20, r14
 8b8:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    printNumber(__int128, base);
 8ba:	73 df       	rcall	.-282    	; 0x7a2 <Print::printNumber(unsigned long, unsigned char)>
  }
}
 8bc:	cd b7       	in	r28, 0x3d	; 61
 8be:	de b7       	in	r29, 0x3e	; 62
 8c0:	e6 e0       	ldi	r30, 0x06	; 6
 8c2:	7a c0       	rjmp	.+244    	; 0x9b8 <__epilogue_restores__+0x18>

000008c4 <Print::print(char, int)>:
void Print::print(const char str[])
{
  write(str);
}

void Print::print(char char, int base)
 8c4:	ef 92       	push	r14
 8c6:	ff 92       	push	r15
 8c8:	0f 93       	push	r16
 8ca:	f 93       	push	r17
 8cc:	9a 01       	movw	r18, r20
{
  print((long) char, base);
 8ce:	e6 2e       	mov	r14, r22
 8d0:	ff 24       	eor	r15, r15
 8d2:	00 e0       	ldi	r16, 0x00	; 0
 8d4:	10 e0       	ldi	r17, 0x00	; 0
 8d6:	b8 01       	movw	r22, r16
 8d8:	a7 01       	movw	r20, r14
 8da:	c6 df       	rcall	.-116    	; 0x868 <Print::print(long, int)>
}
 8dc:	f 91       	pop	r17
 8de:	0f 91       	pop	r16
 8e0:	ff 90       	pop	r15
 8e2:	ef 90       	pop	r14
 8e4:	08 95       	ret

000008e6 <main>:
#include <WProgram.h>

int main(void)
{
	init();
 8e6:	d7 dc       	rcall	.-1618   	; 0x296 <init>

	setup();
 8e8:	38 dc       	rcall	.-1936   	; 0x15a <setup>
    
	for (;;)
		loop();
 8ea:	12 dc       	rcall	.-2012   	; 0x110 <loop>
 8ec:	fe cf       	rjmp	.-4      	; 0x8ea <main+0x4>

000008ee <__udivmodsi4>:
 8ee:	a1 e2       	ldi	r26, 0x21	; 33
 8f0:	a 2e       	mov	r1, r26
 8f2:	aa b       	sub	r26, r26
 8f4:	bb b       	sub	r27, r27
 8f6:	fd 01       	movw	r30, r26
 8f8:	0d c0       	rjmp	.+26     	; 0x914 <__udivmodsi4_ep>

000008fa <__udivmodsi4_loop>:
 8fa:	aa f       	adc	r26, r26
 8fc:	bb f       	adc	r27, r27
 8fe:	ee f       	adc	r30, r30
 900:	ff f       	adc	r31, r31
 902:	a2 17       	cp	r26, r18
 904:	b3 07       	cpc	r27, r19
 906:	e4 07       	cpc	r30, r20
 908:	f5 07       	cpc	r31, r21
 90a:	20 f0       	brcs	.+8      	; 0x914 <__udivmodsi4_ep>
 90c:	a2 b       	sub	r26, r18
 90e:	b3 0b       	sbc	r27, r19
 910:	e4 0b       	sbc	r30, r20
 912:	f5 0b       	sbc	r31, r21

00000914 <__udivmodsi4_ep>:
 914:	66 f       	adc	r22, r22
 916:	77 f       	adc	r23, r23
 918:	88 f       	adc	r24, r24
 91a:	99 f       	adc	r25, r25
 91c:	a 94       	dec	r1
 91e:	69 f7       	brne	.-38     	; 0x8fa <__udivmodsi4_loop>
 920:	60 95       	com	r22
 922:	70 95       	com	r23
 924:	80 95       	com	r24
 926:	90 95       	com	r25
 928:	9b 01       	movw	r18, r22
 92a:	ac 01       	movw	r20, r24
 92c:	bd 01       	movw	r22, r26
 92e:	cf 01       	movw	r24, r30
 930:	08 95       	ret

00000932 <__divmodsi4>:
 932:	97 fb       	bst	r25, 7
 934:	09 2e       	mov	r0, r25
 936:	05 26       	eor	r0, r21
 938:	0e d0       	rcall	.+28     	; 0x956 <__divmodsi4_neg1>
 93a:	57 fd       	sbrc	r21, 7
 93c:	04 d0       	rcall	.+8      	; 0x946 <__divmodsi4_neg2>
 93e:	d7 df       	rcall	.-82     	; 0x8ee <__udivmodsi4>
 940:	0a d0       	rcall	.+20     	; 0x956 <__divmodsi4_neg1>
 942:	00 c       	adc	r0, r0
 944:	38 f4       	brcc	.+14     	; 0x954 <__divmodsi4_exit>

00000946 <__divmodsi4_neg2>:
 946:	50 95       	com	r21
 948:	40 95       	com	r20
 94a:	30 95       	com	r19
 94c:	21 95       	neg	r18
 94e:	3f 4f       	sbci	r19, 0xFF	; 255
 950:	4f 4f       	sbci	r20, 0xFF	; 255
 952:	5f 4f       	sbci	r21, 0xFF	; 255

00000954 <__divmodsi4_exit>:
 954:	08 95       	ret

00000956 <__divmodsi4_neg1>:
 956:	f6 f7       	brtc	.-4      	; 0x954 <__divmodsi4_exit>
 958:	90 95       	com	r25
 95a:	80 95       	com	r24
 95c:	70 95       	com	r23
 95e:	61 95       	neg	r22
 960:	7f 4f       	sbci	r23, 0xFF	; 255
 962:	8f 4f       	sbci	r24, 0xFF	; 255
 964:	9f 4f       	sbci	r25, 0xFF	; 255
 966:	08 95       	ret

00000968 <__prologue_saves__>:
 968:	2f 92       	push	r2
 96a:	3f 92       	push	r3
 96c:	4f 92       	push	r4
 96e:	5f 92       	push	r5
 970:	6f 92       	push	r6
 972:	7f 92       	push	r7
 974:	8f 92       	push	r8
 976:	9f 92       	push	r9
 978:	af 92       	push	r10
 97a:	bf 92       	push	r11
 97c:	cf 92       	push	r12
 97e:	df 92       	push	r13
 980:	ef 92       	push	r14
 982:	ff 92       	push	r15
 984:	0f 93       	push	r16
 986:	f 93       	push	r17
 988:	cf 93       	push	r28
 98a:	df 93       	push	r29
 98c:	cd b7       	in	r28, 0x3d	; 61
 98e:	de b7       	in	r29, 0x3e	; 62
 990:	ca b       	sub	r28, r26
 992:	db 0b       	sbc	r29, r27
 994:	0f b6       	in	r0, 0x3f	; 63
 996:	f8 94       	cli
 998:	de bf       	out	0x3e, r29	; 62
 99a:	0f be       	out	0x3f, r0	; 63
 99c:	cd bf       	out	0x3d, r28	; 61
 99e:	09 94       	ijmp

000009a0 <__epilogue_restores__>:
 9a0:	2a 88       	ldd	r2, Y+18	; 0x12
 9a2:	39 88       	ldd	r3, Y+17	; 0x11
 9a4:	48 88       	ldd	r4, Y+16	; 0x10
 9a6:	5f 84       	ldd	r5, Y+15	; 0x0f
 9a8:	6e 84       	ldd	r6, Y+14	; 0x0e
 9aa:	7d 84       	ldd	r7, Y+13	; 0x0d
 9ac:	8c 84       	ldd	r8, Y+12	; 0x0c
 9ae:	9b 84       	ldd	r9, Y+11	; 0x0b
 9b0:	aa 84       	ldd	r10, Y+10	; 0x0a
 9b2:	b9 84       	ldd	r11, Y+9	; 0x09
 9b4:	c8 84       	ldd	r12, Y+8	; 0x08
 9b6:	df 80       	ldd	r13, Y+7	; 0x07
 9b8:	ee 80       	ldd	r14, Y+6	; 0x06
 9ba:	fd 80       	ldd	r15, Y+5	; 0x05
 9bc:	0c 81       	ldd	r16, Y+4	; 0x04
 9be:	b 81       	ldd	r17, Y+3	; 0x03
 9c0:	aa 81       	ldd	r26, Y+2	; 0x02
 9c2:	b9 81       	ldd	r27, Y+1	; 0x01
 9c4:	ce 0f       	add	r28, r30
 9c6:	d1 d       	adc	r29, r1
 9c8:	0f b6       	in	r0, 0x3f	; 63
 9ca:	f8 94       	cli
 9cc:	de bf       	out	0x3e, r29	; 62
 9ce:	0f be       	out	0x3f, r0	; 63
 9d0:	cd bf       	out	0x3d, r28	; 61
 9d2:	ed 01       	movw	r28, r26
 9d4:	08 95       	ret

000009d6 <__tablejump2__>:
 9d6:	ee 0f       	add	r30, r30
 9d8:	ff f       	adc	r31, r31

000009da <__tablejump__>:
 9da:	05 90       	lpm	r0, Z+
 9dc:	f4 91       	lpm	r31, Z+
 9de:	e0 2d       	mov	r30, r0
 9e0:	09 94       	ijmp

000009e2 <_exit>:
 9e2:	f8 94       	cli

000009e4 <__stop_program>:
 9e4:	ff cf       	rjmp	.-2      	; 0x9e4 <__stop_program>
